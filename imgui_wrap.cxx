/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: imgui.i

#define SWIGMODULE imgui

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef int intgo;
typedef unsigned int uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "imgui/imgui.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_imgui_4778b1b319b813b6(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  Swig_free(arg1);

}


void *_wrap_Swig_malloc_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImVec2_x_set_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, float _swig_go_1) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->x = arg2;

}


float _wrap_ImVec2_x_get_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (float) ((arg1)->x);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImVec2_y_set_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, float _swig_go_1) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->y = arg2;

}


float _wrap_ImVec2_y_get_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (float) ((arg1)->y);
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_new_ImVec2__SWIG_0_imgui_4778b1b319b813b6() {
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;


  result = (ImVec2 *)new ImVec2();
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


ImVec2 *_wrap_new_ImVec2__SWIG_1_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (ImVec2 *)new ImVec2(arg1,arg2);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_delete_ImVec2_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImVec4_x_set_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->x = arg2;

}


float _wrap_ImVec4_x_get_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->x);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImVec4_y_set_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->y = arg2;

}


float _wrap_ImVec4_y_get_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->y);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImVec4_z_set_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->z = arg2;

}


float _wrap_ImVec4_z_get_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->z);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImVec4_w_set_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0, float _swig_go_1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;

  arg1 = *(ImVec4 **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->w = arg2;

}


float _wrap_ImVec4_w_get_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (float) ((arg1)->w);
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec4 *_wrap_new_ImVec4__SWIG_0_imgui_4778b1b319b813b6() {
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;


  result = (ImVec4 *)new ImVec4();
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


ImVec4 *_wrap_new_ImVec4__SWIG_1_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImVec4 *)new ImVec4(arg1,arg2,arg3,arg4);
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


void _wrap_delete_ImVec4_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;

  arg1 = *(ImVec4 **)&_swig_go_0;

  delete arg1;

}


ImGuiIO *_wrap_GetIO_imgui_4778b1b319b813b6() {
  ImGuiIO *result = 0 ;
  ImGuiIO *_swig_go_result;


  result = (ImGuiIO *) &ImGui::GetIO();
  *(ImGuiIO **)&_swig_go_result = result;
  return _swig_go_result;
}


ImGuiStyle *_wrap_GetStyle_imgui_4778b1b319b813b6() {
  ImGuiStyle *result = 0 ;
  ImGuiStyle *_swig_go_result;


  result = (ImGuiStyle *) &ImGui::GetStyle();
  *(ImGuiStyle **)&_swig_go_result = result;
  return _swig_go_result;
}


ImDrawData *_wrap_GetDrawData_imgui_4778b1b319b813b6() {
  ImDrawData *result = 0 ;
  ImDrawData *_swig_go_result;


  result = (ImDrawData *)ImGui::GetDrawData();
  *(ImDrawData **)&_swig_go_result = (ImDrawData *)result;
  return _swig_go_result;
}


void _wrap_NewFrame_imgui_4778b1b319b813b6() {
  ImGui::NewFrame();

}


void _wrap_Render_imgui_4778b1b319b813b6() {
  ImGui::Render();

}


void _wrap_Shutdown_imgui_4778b1b319b813b6() {
  ImGui::Shutdown();

}


void _wrap_ShowTestWindow__SWIG_0_imgui_4778b1b319b813b6(bool *_swig_go_0) {
  bool *arg1 = (bool *) 0 ;

  arg1 = *(bool **)&_swig_go_0;

  ImGui::ShowTestWindow(arg1);

}


void _wrap_ShowTestWindow__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::ShowTestWindow();

}


void _wrap_ShowMetricsWindow__SWIG_0_imgui_4778b1b319b813b6(bool *_swig_go_0) {
  bool *arg1 = (bool *) 0 ;

  arg1 = *(bool **)&_swig_go_0;

  ImGui::ShowMetricsWindow(arg1);

}


void _wrap_ShowMetricsWindow__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::ShowMetricsWindow();

}


void _wrap_ShowStyleEditor__SWIG_0_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  ImGui::ShowStyleEditor(arg1);

}


void _wrap_ShowStyleEditor__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::ShowStyleEditor();

}


void _wrap_ShowUserGuide_imgui_4778b1b319b813b6() {
  ImGui::ShowUserGuide();

}


bool _wrap_Begin__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiWindowFlags)_swig_go_2;

  result = (bool)ImGui::Begin((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::Begin((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::Begin((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, ImVec2 *_swig_go_2, float _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  ImGuiWindowFlags arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (ImGuiWindowFlags)_swig_go_4;

  result = (bool)ImGui::Begin((char const *)arg1,arg2,(ImVec2 const &)*arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, ImVec2 *_swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::Begin((char const *)arg1,arg2,(ImVec2 const &)*arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Begin__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, ImVec2 *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  result = (bool)ImGui::Begin((char const *)arg1,arg2,(ImVec2 const &)*arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_End_imgui_4778b1b319b813b6() {
  ImGui::End();

}


bool _wrap_BeginChild__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;
  arg4 = (ImGuiWindowFlags)_swig_go_3;

  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginChild((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_4_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2, intgo _swig_go_3) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;
  arg4 = (ImGuiWindowFlags)_swig_go_3;

  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3,arg4);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_5_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_6_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChild__SWIG_7_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiID arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;

  result = (bool)ImGui::BeginChild(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndChild_imgui_4778b1b319b813b6() {
  ImGui::EndChild();

}


ImVec2 *_wrap_GetContentRegionMax_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetContentRegionMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetContentRegionAvail_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetContentRegionAvail();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetContentRegionAvailWidth_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetContentRegionAvailWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowContentRegionMin_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowContentRegionMin();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowContentRegionMax_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowContentRegionMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetWindowContentRegionWidth_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowContentRegionWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawList *_wrap_GetWindowDrawList_imgui_4778b1b319b813b6() {
  ImDrawList *result = 0 ;
  ImDrawList *_swig_go_result;


  result = (ImDrawList *)ImGui::GetWindowDrawList();
  *(ImDrawList **)&_swig_go_result = (ImDrawList *)result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowPos_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetWindowSize_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetWindowSize();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetWindowWidth_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetWindowHeight_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowHeight();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowCollapsed_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowCollapsed();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetWindowFontScale_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetWindowFontScale(arg1);

}


void _wrap_SetNextWindowPos__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetNextWindowPos__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetNextWindowPos((ImVec2 const &)*arg1);

}


void _wrap_SetNextWindowPosCenter__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiCond arg1 ;

  arg1 = (ImGuiCond)_swig_go_0;

  ImGui::SetNextWindowPosCenter(arg1);

}


void _wrap_SetNextWindowPosCenter__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::SetNextWindowPosCenter();

}


void _wrap_SetNextWindowSize__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextWindowSize((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetNextWindowSize__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetNextWindowSize((ImVec2 const &)*arg1);

}


void _wrap_SetNextWindowSizeConstraints__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, void** _swig_go_2, void *_swig_go_3) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeConstraintCallback arg3 = (ImGuiSizeConstraintCallback) 0 ;
  void *arg4 = (void *) 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImGuiSizeConstraintCallback *)&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;

  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3,arg4);

}


void _wrap_SetNextWindowSizeConstraints__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, void** _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiSizeConstraintCallback arg3 = (ImGuiSizeConstraintCallback) 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImGuiSizeConstraintCallback *)&_swig_go_2;

  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);

}


void _wrap_SetNextWindowSizeConstraints__SWIG_2_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);

}


void _wrap_SetNextWindowContentSize_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetNextWindowContentSize((ImVec2 const &)*arg1);

}


void _wrap_SetNextWindowContentWidth_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetNextWindowContentWidth(arg1);

}


void _wrap_SetNextWindowCollapsed__SWIG_0_imgui_4778b1b319b813b6(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  ImGuiCond arg2 ;

  arg1 = (bool)_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextWindowCollapsed(arg1,arg2);

}


void _wrap_SetNextWindowCollapsed__SWIG_1_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::SetNextWindowCollapsed(arg1);

}


void _wrap_SetNextWindowFocus_imgui_4778b1b319b813b6() {
  ImGui::SetNextWindowFocus();

}


void _wrap_SetWindowPos__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetWindowPos((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetWindowPos__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetWindowPos((ImVec2 const &)*arg1);

}


void _wrap_SetWindowSize__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, intgo _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetWindowSize((ImVec2 const &)*arg1,arg2);

}


void _wrap_SetWindowSize__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetWindowSize((ImVec2 const &)*arg1);

}


void _wrap_SetWindowCollapsed__SWIG_0_imgui_4778b1b319b813b6(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  ImGuiCond arg2 ;

  arg1 = (bool)_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetWindowCollapsed(arg1,arg2);

}


void _wrap_SetWindowCollapsed__SWIG_1_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::SetWindowCollapsed(arg1);

}


void _wrap_SetWindowFocus__SWIG_0_imgui_4778b1b319b813b6() {
  ImGui::SetWindowFocus();

}


void _wrap_SetWindowPos__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiCond)_swig_go_2;

  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2,arg3);

  free(arg1);
}


void _wrap_SetWindowPos__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2);

  free(arg1);
}


void _wrap_SetWindowSize__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiCond)_swig_go_2;

  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2,arg3);

  free(arg1);
}


void _wrap_SetWindowSize__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2);

  free(arg1);
}


void _wrap_SetWindowCollapsed__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;
  arg3 = (ImGuiCond)_swig_go_2;

  ImGui::SetWindowCollapsed((char const *)arg1,arg2,arg3);

  free(arg1);
}


void _wrap_SetWindowCollapsed__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  ImGui::SetWindowCollapsed((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_SetWindowFocus__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SetWindowFocus((char const *)arg1);

  free(arg1);
}


float _wrap_GetScrollX_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollX();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetScrollY_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollY();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetScrollMaxX_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollMaxX();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetScrollMaxY_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetScrollMaxY();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetScrollX_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollX(arg1);

}


void _wrap_SetScrollY_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollY(arg1);

}


void _wrap_SetScrollHere__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollHere(arg1);

}


void _wrap_SetScrollHere__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::SetScrollHere();

}


void _wrap_SetScrollFromPosY__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SetScrollFromPosY(arg1,arg2);

}


void _wrap_SetScrollFromPosY__SWIG_1_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetScrollFromPosY(arg1);

}


void _wrap_SetKeyboardFocusHere__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::SetKeyboardFocusHere(arg1);

}


void _wrap_SetKeyboardFocusHere__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::SetKeyboardFocusHere();

}


void _wrap_SetStateStorage_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;

  ImGui::SetStateStorage(arg1);

}


ImGuiStorage *_wrap_GetStateStorage_imgui_4778b1b319b813b6() {
  ImGuiStorage *result = 0 ;
  ImGuiStorage *_swig_go_result;


  result = (ImGuiStorage *)ImGui::GetStateStorage();
  *(ImGuiStorage **)&_swig_go_result = (ImGuiStorage *)result;
  return _swig_go_result;
}


void _wrap_PushFont_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;

  ImGui::PushFont(arg1);

}


void _wrap_PopFont_imgui_4778b1b319b813b6() {
  ImGui::PopFont();

}


void _wrap_PushStyleColor__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, intgo _swig_go_1) {
  ImGuiCol arg1 ;
  ImU32 arg2 ;

  arg1 = (ImGuiCol)_swig_go_0;
  arg2 = (ImU32)_swig_go_1;

  ImGui::PushStyleColor(arg1,arg2);

}


void _wrap_PushStyleColor__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec4 *_swig_go_1) {
  ImGuiCol arg1 ;
  ImVec4 *arg2 = 0 ;

  arg1 = (ImGuiCol)_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  ImGui::PushStyleColor(arg1,(ImVec4 const &)*arg2);

}


void _wrap_PopStyleColor__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::PopStyleColor(arg1);

}


void _wrap_PopStyleColor__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::PopStyleColor();

}


void _wrap_PushStyleVar__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  ImGuiStyleVar arg1 ;
  float arg2 ;

  arg1 = (ImGuiStyleVar)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::PushStyleVar(arg1,arg2);

}


void _wrap_PushStyleVar__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyleVar arg1 ;
  ImVec2 *arg2 = 0 ;

  arg1 = (ImGuiStyleVar)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::PushStyleVar(arg1,(ImVec2 const &)*arg2);

}


void _wrap_PopStyleVar__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::PopStyleVar(arg1);

}


void _wrap_PopStyleVar__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::PopStyleVar();

}


ImVec4 *_wrap_GetStyleColorVec4_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiCol arg1 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;

  result = (ImVec4 *) &ImGui::GetStyleColorVec4(arg1);
  *(ImVec4 **)&_swig_go_result = result;
  return _swig_go_result;
}


ImFont *_wrap_GetFont_imgui_4778b1b319b813b6() {
  ImFont *result = 0 ;
  ImFont *_swig_go_result;


  result = (ImFont *)ImGui::GetFont();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


float _wrap_GetFontSize_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetFontSize();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetFontTexUvWhitePixel_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetFontTexUvWhitePixel();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


intgo _wrap_GetColorU32__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  ImGuiCol arg1 ;
  float arg2 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (ImU32)ImGui::GetColorU32(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetColorU32__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiCol arg1 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;

  result = (ImU32)ImGui::GetColorU32(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetColorU32__SWIG_2_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (ImU32)ImGui::GetColorU32((ImVec4 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetColorU32FromU32_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImU32 arg1 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = (ImU32)_swig_go_0;

  result = (ImU32)ImGui::GetColorU32(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_PushItemWidth_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::PushItemWidth(arg1);

}


void _wrap_PopItemWidth_imgui_4778b1b319b813b6() {
  ImGui::PopItemWidth();

}


float _wrap_CalcItemWidth_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::CalcItemWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_PushTextWrapPos__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::PushTextWrapPos(arg1);

}


void _wrap_PushTextWrapPos__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::PushTextWrapPos();

}


void _wrap_PopTextWrapPos_imgui_4778b1b319b813b6() {
  ImGui::PopTextWrapPos();

}


void _wrap_PushAllowKeyboardFocus_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::PushAllowKeyboardFocus(arg1);

}


void _wrap_PopAllowKeyboardFocus_imgui_4778b1b319b813b6() {
  ImGui::PopAllowKeyboardFocus();

}


void _wrap_PushButtonRepeat_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::PushButtonRepeat(arg1);

}


void _wrap_PopButtonRepeat_imgui_4778b1b319b813b6() {
  ImGui::PopButtonRepeat();

}


void _wrap_Separator_imgui_4778b1b319b813b6() {
  ImGui::Separator();

}


void _wrap_SameLine__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1) {
  float arg1 ;
  float arg2 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SameLine(arg1,arg2);

}


void _wrap_SameLine__SWIG_1_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SameLine(arg1);

}


void _wrap_SameLine__SWIG_2_imgui_4778b1b319b813b6() {
  ImGui::SameLine();

}


void _wrap_NewLine_imgui_4778b1b319b813b6() {
  ImGui::NewLine();

}


void _wrap_Spacing_imgui_4778b1b319b813b6() {
  ImGui::Spacing();

}


void _wrap_Dummy_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::Dummy((ImVec2 const &)*arg1);

}


void _wrap_Indent__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::Indent(arg1);

}


void _wrap_Indent__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::Indent();

}


void _wrap_Unindent__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::Unindent(arg1);

}


void _wrap_Unindent__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::Unindent();

}


void _wrap_BeginGroup_imgui_4778b1b319b813b6() {
  ImGui::BeginGroup();

}


void _wrap_EndGroup_imgui_4778b1b319b813b6() {
  ImGui::EndGroup();

}


ImVec2 *_wrap_GetCursorPos_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetCursorPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


float _wrap_GetCursorPosX_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetCursorPosX();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetCursorPosY_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetCursorPosY();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetCursorPos_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetCursorPos((ImVec2 const &)*arg1);

}


void _wrap_SetCursorPosX_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetCursorPosX(arg1);

}


void _wrap_SetCursorPosY_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::SetCursorPosY(arg1);

}


ImVec2 *_wrap_GetCursorStartPos_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetCursorStartPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetCursorScreenPos_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetCursorScreenPos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_SetCursorScreenPos_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;

  arg1 = *(ImVec2 **)&_swig_go_0;

  ImGui::SetCursorScreenPos((ImVec2 const &)*arg1);

}


void _wrap_AlignFirstTextHeightToWidgets_imgui_4778b1b319b813b6() {
  ImGui::AlignFirstTextHeightToWidgets();

}


float _wrap_GetTextLineHeight_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTextLineHeight();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetTextLineHeightWithSpacing_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTextLineHeightWithSpacing();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetItemsLineHeightWithSpacing_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetItemsLineHeightWithSpacing();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Columns__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  arg1 = (int)_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  ImGui::Columns(arg1,(char const *)arg2,arg3);

  free(arg2);
}


void _wrap_Columns__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;

  arg1 = (int)_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::Columns(arg1,(char const *)arg2);

  free(arg2);
}


void _wrap_Columns__SWIG_2_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::Columns(arg1);

}


void _wrap_Columns__SWIG_3_imgui_4778b1b319b813b6() {
  ImGui::Columns();

}


void _wrap_NextColumn_imgui_4778b1b319b813b6() {
  ImGui::NextColumn();

}


intgo _wrap_GetColumnIndex_imgui_4778b1b319b813b6() {
  int result;
  intgo _swig_go_result;


  result = (int)ImGui::GetColumnIndex();
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetColumnWidth__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  float result;
  float _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (float)ImGui::GetColumnWidth(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetColumnWidth__SWIG_1_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetColumnWidth();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetColumnWidth_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SetColumnWidth(arg1,arg2);

}


float _wrap_GetColumnOffset__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  float result;
  float _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (float)ImGui::GetColumnOffset(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetColumnOffset__SWIG_1_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetColumnOffset();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetColumnOffset_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  ImGui::SetColumnOffset(arg1,arg2);

}


intgo _wrap_GetColumnsCount_imgui_4778b1b319b813b6() {
  int result;
  intgo _swig_go_result;


  result = (int)ImGui::GetColumnsCount();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_PushID__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::PushID((char const *)arg1);

  free(arg1);
}


void _wrap_PushID__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::PushID((char const *)arg1,(char const *)arg2);

  free(arg1);
  free(arg2);
}


void _wrap_PushID__SWIG_2_imgui_4778b1b319b813b6(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  ImGui::PushID((void const *)arg1);

}


void _wrap_PushID__SWIG_3_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::PushID(arg1);

}


void _wrap_PopID_imgui_4778b1b319b813b6() {
  ImGui::PopID();

}


intgo _wrap_GetID__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (ImGuiID)ImGui::GetID((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


intgo _wrap_GetID__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (ImGuiID)ImGui::GetID((char const *)arg1,(char const *)arg2);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


intgo _wrap_GetID__SWIG_2_imgui_4778b1b319b813b6(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  ImGuiID result;
  intgo _swig_go_result;

  arg1 = *(void **)&_swig_go_0;

  result = (ImGuiID)ImGui::GetID((void const *)arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Text_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::Text((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_TextV_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, va_list *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  argp2 = (va_list *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg2 = (va_list)*argp2;


  ImGui::TextV((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_TextColored_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0, _gostring_ _swig_go_1) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;

  arg1 = *(ImVec4 **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::TextColored((ImVec4 const &)*arg1,(char const *)arg2,arg3);

  free(arg2);
}


void _wrap_TextColoredV_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;

  arg1 = *(ImVec4 **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;


  ImGui::TextColoredV((ImVec4 const &)*arg1,(char const *)arg2,arg3);

  free(arg2);
}


void _wrap_TextDisabled_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::TextDisabled((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_TextDisabledV_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, va_list *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  argp2 = (va_list *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg2 = (va_list)*argp2;


  ImGui::TextDisabledV((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_TextWrapped_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::TextWrapped((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_TextWrappedV_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, va_list *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  argp2 = (va_list *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg2 = (va_list)*argp2;


  ImGui::TextWrappedV((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_TextUnformatted__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::TextUnformatted((char const *)arg1,(char const *)arg2);

  free(arg1);
  free(arg2);
}


void _wrap_TextUnformatted__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::TextUnformatted((char const *)arg1);

  free(arg1);
}


void _wrap_LabelText_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::LabelText((char const *)arg1,(char const *)arg2,arg3);

  free(arg1);
  free(arg2);
}


void _wrap_LabelTextV_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;


  ImGui::LabelTextV((char const *)arg1,(char const *)arg2,arg3);

  free(arg1);
  free(arg2);
}


void _wrap_Bullet_imgui_4778b1b319b813b6() {
  ImGui::Bullet();

}


void _wrap_BulletText_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::BulletText((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_BulletTextV_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, va_list *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  argp2 = (va_list *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg2 = (va_list)*argp2;


  ImGui::BulletTextV((char const *)arg1,arg2);

  free(arg1);
}


bool _wrap_Button__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::Button((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Button__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::Button((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SmallButton_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::SmallButton((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InvisibleButton_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_Image__SWIG_0_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec4 *_swig_go_4, ImVec4 *_swig_go_5) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec4 **)&_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5,(ImVec4 const &)*arg6);

}


void _wrap_Image__SWIG_1_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec4 *_swig_go_4) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec4 **)&_swig_go_4;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5);

}


void _wrap_Image__SWIG_2_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);

}


void _wrap_Image__SWIG_3_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);

}


void _wrap_Image__SWIG_4_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::Image(arg1,(ImVec2 const &)*arg2);

}


bool _wrap_ImageButton__SWIG_0_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, ImVec4 *_swig_go_6) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;
  arg7 = *(ImVec4 **)&_swig_go_6;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_1_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_2_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_3_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_4_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImageButton__SWIG_5_imgui_4778b1b319b813b6(ImTextureID _swig_go_0, ImVec2 *_swig_go_1) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImTextureID *)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_Checkbox_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::Checkbox((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CheckboxFlags_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(unsigned int **)&_swig_go_1;
  arg3 = (unsigned int)_swig_go_2;

  result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_RadioButton__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::RadioButton((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_RadioButton__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::RadioButton((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const *)arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_ _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';

  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Combo__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_PlotLines__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7, intgo _swig_go_8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;

  arg9 = (int)_swig_go_8;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;


  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);

  free(arg1);
  free(arg5);
}


void _wrap_PlotLines__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4);

  free(arg1);
}


void _wrap_PlotLines__SWIG_6_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3);

  free(arg1);
}


void _wrap_PlotLines__SWIG_7_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7, ImVec2 *_swig_go_8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  argp9 = (ImVec2 *)_swig_go_8;
  if (argp9 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg9 = (ImVec2)*argp9;


  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_8_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_9_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_10_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);

  free(arg1);
  free(arg6);
}


void _wrap_PlotLines__SWIG_11_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5);

  free(arg1);
}


void _wrap_PlotLines__SWIG_12_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7, intgo _swig_go_8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;

  arg9 = (int)_swig_go_8;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6, ImVec2 *_swig_go_7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  argp8 = (ImVec2 *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg8 = (ImVec2)*argp8;


  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,arg8);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;
  arg7 = (float)_swig_go_6;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);

  free(arg1);
  free(arg5);
}


void _wrap_PlotHistogram__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_6_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_7_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7, ImVec2 *_swig_go_8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  argp9 = (ImVec2 *)_swig_go_8;
  if (argp9 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg9 = (ImVec2)*argp9;


  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,arg9);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_8_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6, float _swig_go_7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;
  arg8 = (float)_swig_go_7;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_9_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_10_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);

  free(arg1);
  free(arg6);
}


void _wrap_PlotHistogram__SWIG_11_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5);

  free(arg1);
}


void _wrap_PlotHistogram__SWIG_12_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, void* _swig_go_1, void *_swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float (**)(void *,int))&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4);

  free(arg1);
}


void _wrap_ProgressBar__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0, ImVec2 *_swig_go_1, _gostring_ _swig_go_2) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2,(char const *)arg3);

  free(arg3);
}


void _wrap_ProgressBar__SWIG_1_imgui_4778b1b319b813b6(float _swig_go_0, ImVec2 *_swig_go_1) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2);

}


void _wrap_ProgressBar__SWIG_2_imgui_4778b1b319b813b6(float _swig_go_0) {
  float arg1 ;

  arg1 = (float)_swig_go_0;

  ImGui::ProgressBar(arg1);

}


bool _wrap_DragFloat__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat2__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat3__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloat4__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, float _swig_go_8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragFloatRange2__SWIG_6_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;

  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt2__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt3__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragInt4__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::DragInt4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  free(arg8);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, _gostring_ _swig_go_6) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg7);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_DragIntRange2__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;

  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, intgo _swig_go_3, void** _swig_go_4, void *_swig_go_5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiTextEditCallback arg5 = (ImGuiTextEditCallback) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;
  arg5 = *(ImGuiTextEditCallback *)&_swig_go_4;
  arg6 = *(void **)&_swig_go_5;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, intgo _swig_go_3, void** _swig_go_4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiTextEditCallback arg5 = (ImGuiTextEditCallback) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;
  arg5 = *(ImGuiTextEditCallback *)&_swig_go_4;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputText__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;

  result = (bool)ImGui::InputText((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, void** _swig_go_5, void *_swig_go_6) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiTextEditCallback arg6 = (ImGuiTextEditCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;
  arg6 = *(ImGuiTextEditCallback *)&_swig_go_5;
  arg7 = *(void **)&_swig_go_6;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, void** _swig_go_5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiTextEditCallback arg6 = (ImGuiTextEditCallback) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;
  arg6 = *(ImGuiTextEditCallback *)&_swig_go_5;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputTextMultiline__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, long long _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (size_t)_swig_go_2;

  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (ImGuiInputTextFlags)_swig_go_5;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat2__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat3__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImGuiInputTextFlags)_swig_go_3;

  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputFloat4__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (ImGuiInputTextFlags)_swig_go_4;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (ImGuiInputTextFlags)_swig_go_2;

  result = (bool)ImGui::InputInt2((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt2((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (ImGuiInputTextFlags)_swig_go_2;

  result = (bool)ImGui::InputInt3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (ImGuiInputTextFlags)_swig_go_2;

  result = (bool)ImGui::InputInt4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_InputInt4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;

  result = (bool)ImGui::InputInt4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat2__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat3__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderFloat4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, float _swig_go_5) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';

  arg6 = (float)_swig_go_5;

  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderFloat4__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, float _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderAngle__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt2__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt2__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_SliderInt4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, _gostring_ _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  _swig_go_result = result;
  free(arg1);
  free(arg5);
  return _swig_go_result;
}


bool _wrap_SliderInt4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_VSliderFloat__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5, float _swig_go_6) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = (float)_swig_go_6;

  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_VSliderFloat__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_VSliderFloat__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, float *_swig_go_2, float _swig_go_3, float _swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(float **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_VSliderInt__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  _swig_go_result = result;
  free(arg1);
  free(arg6);
  return _swig_go_result;
}


bool _wrap_VSliderInt__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1, intgo *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorEdit4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker3__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker3__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker4__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2, float *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;
  arg4 = *(float **)&_swig_go_3;

  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker4__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorPicker4__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  float *arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(float **)&_swig_go_1;

  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorButton__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec4 *_swig_go_1, intgo _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  ImVec2 arg4 ;
  ImVec2 *argp4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec4 **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;


  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorButton__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec4 *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec4 **)&_swig_go_1;
  arg3 = (ImGuiColorEditFlags)_swig_go_2;

  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ColorButton__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec4 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec4 **)&_swig_go_1;

  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_SetColorEditOptions_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiColorEditFlags arg1 ;

  arg1 = (ImGuiColorEditFlags)_swig_go_0;

  ImGui::SetColorEditOptions(arg1);

}


bool _wrap_TreeNode__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::TreeNode((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_TreeNode__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)ImGui::TreeNode((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_TreeNode__SWIG_2_imgui_4778b1b319b813b6(void *_swig_go_0, _gostring_ _swig_go_1) {
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(void **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)ImGui::TreeNode((void const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg2);
  return _swig_go_result;
}


bool _wrap_TreeNodeV__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;


  result = (bool)ImGui::TreeNodeV((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_TreeNodeV__SWIG_1_imgui_4778b1b319b813b6(void *_swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(void **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;


  result = (bool)ImGui::TreeNodeV((void const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg2);
  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::TreeNodeEx((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_TreeNodeEx__SWIG_3_imgui_4778b1b319b813b6(void *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(void **)&_swig_go_0;
  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)ImGui::TreeNodeEx((void const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg3);
  return _swig_go_result;
}


bool _wrap_TreeNodeExV__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, va_list *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  argp4 = (va_list *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg4 = (va_list)*argp4;


  result = (bool)ImGui::TreeNodeExV((char const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_TreeNodeExV__SWIG_1_imgui_4778b1b319b813b6(void *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, va_list *_swig_go_3) {
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(void **)&_swig_go_0;
  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  argp4 = (va_list *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg4 = (va_list)*argp4;


  result = (bool)ImGui::TreeNodeExV((void const *)arg1,arg2,(char const *)arg3,arg4);
  _swig_go_result = result;
  free(arg3);
  return _swig_go_result;
}


void _wrap_TreePush__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::TreePush((char const *)arg1);

  free(arg1);
}


void _wrap_TreePush__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::TreePush((char *)0);

}


void _wrap_TreePush__SWIG_2_imgui_4778b1b319b813b6(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  ImGui::TreePush((void const *)arg1);

}


void _wrap_TreePop_imgui_4778b1b319b813b6() {
  ImGui::TreePop();

}


void _wrap_TreeAdvanceToLabelPos_imgui_4778b1b319b813b6() {
  ImGui::TreeAdvanceToLabelPos();

}


float _wrap_GetTreeNodeToLabelSpacing_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTreeNodeToLabelSpacing();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetNextTreeNodeOpen__SWIG_0_imgui_4778b1b319b813b6(bool _swig_go_0, intgo _swig_go_1) {
  bool arg1 ;
  ImGuiCond arg2 ;

  arg1 = (bool)_swig_go_0;
  arg2 = (ImGuiCond)_swig_go_1;

  ImGui::SetNextTreeNodeOpen(arg1,arg2);

}


void _wrap_SetNextTreeNodeOpen__SWIG_1_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::SetNextTreeNodeOpen(arg1);

}


bool _wrap_CollapsingHeader__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (ImGuiTreeNodeFlags)_swig_go_1;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::CollapsingHeader((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiTreeNodeFlags)_swig_go_2;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1, intgo _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::Selectable((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2, ImVec2 *_swig_go_3) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiSelectableFlags)_swig_go_2;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_Selectable__SWIG_6_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const *)arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, _gostring_* _swig_go_2, intgo _swig_go_3) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) 0 ;
  int arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(char ***)&_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const *)arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4, intgo _swig_go_5) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (int)_swig_go_5;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBox__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo *_swig_go_1, void* _swig_go_2, void *_swig_go_3, intgo _swig_go_4) {
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(int **)&_swig_go_1;
  arg3 = *(bool (**)(void *,int,char const **))&_swig_go_2;
  arg4 = *(void **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, ImVec2 *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::ListBoxHeader((char const *)arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::ListBoxHeader((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_ListBoxHeader__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_ListBoxFooter_imgui_4778b1b319b813b6() {
  ImGui::ListBoxFooter();

}


void _wrap_Value__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_Value__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_ValueUnsigned_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (unsigned int)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_Value__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float _swig_go_1, _gostring_ _swig_go_2) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (float)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  ImGui::Value((char const *)arg1,arg2,(char const *)arg3);

  free(arg1);
  free(arg3);
}


void _wrap_Value__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, float _swig_go_1) {
  char *arg1 = (char *) 0 ;
  float arg2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (float)_swig_go_1;

  ImGui::Value((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_SetTooltip_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SetTooltip((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_SetTooltipV_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, va_list *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  argp2 = (va_list *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg2 = (va_list)*argp2;


  ImGui::SetTooltipV((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_BeginTooltip_imgui_4778b1b319b813b6() {
  ImGui::BeginTooltip();

}


void _wrap_EndTooltip_imgui_4778b1b319b813b6() {
  ImGui::EndTooltip();

}


bool _wrap_BeginMainMenuBar_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginMainMenuBar();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndMainMenuBar_imgui_4778b1b319b813b6() {
  ImGui::EndMainMenuBar();

}


bool _wrap_BeginMenuBar_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginMenuBar();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndMenuBar_imgui_4778b1b319b813b6() {
  ImGui::EndMenuBar();

}


bool _wrap_BeginMenu__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool _swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::BeginMenu((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginMenu__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginMenu((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_EndMenu_imgui_4778b1b319b813b6() {
  ImGui::EndMenu();

}


bool _wrap_MenuItem__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;
  arg4 = (bool)_swig_go_3;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::MenuItem((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool *_swig_go_2, bool _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = *(bool **)&_swig_go_2;
  arg4 = (bool)_swig_go_3;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_MenuItem__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool *_swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = *(bool **)&_swig_go_2;

  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


void _wrap_OpenPopup_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::OpenPopup((char const *)arg1);

  free(arg1);
}


bool _wrap_BeginPopup_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopup((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupModal__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1, intgo _swig_go_2) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;
  arg3 = (ImGuiWindowFlags)_swig_go_2;

  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupModal__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, bool *_swig_go_1) {
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = *(bool **)&_swig_go_1;

  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupModal__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupModal((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextItem__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextItem__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextWindow__SWIG_3_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginPopupContextWindow();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginPopupContextVoid__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, intgo _swig_go_1) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';

  arg2 = (int)_swig_go_1;

  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1,arg2);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextVoid__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


bool _wrap_BeginPopupContextVoid__SWIG_2_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::BeginPopupContextVoid();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndPopup_imgui_4778b1b319b813b6() {
  ImGui::EndPopup();

}


bool _wrap_IsPopupOpen_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (bool)ImGui::IsPopupOpen((char const *)arg1);
  _swig_go_result = result;
  free(arg1);
  return _swig_go_result;
}


void _wrap_CloseCurrentPopup_imgui_4778b1b319b813b6() {
  ImGui::CloseCurrentPopup();

}


void _wrap_LogToTTY__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::LogToTTY(arg1);

}


void _wrap_LogToTTY__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::LogToTTY();

}


void _wrap_LogToFile__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  char *arg2 = (char *) 0 ;

  arg1 = (int)_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  ImGui::LogToFile(arg1,(char const *)arg2);

  free(arg2);
}


void _wrap_LogToFile__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::LogToFile(arg1);

}


void _wrap_LogToFile__SWIG_2_imgui_4778b1b319b813b6() {
  ImGui::LogToFile();

}


void _wrap_LogToClipboard__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::LogToClipboard(arg1);

}


void _wrap_LogToClipboard__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::LogToClipboard();

}


void _wrap_LogFinish_imgui_4778b1b319b813b6() {
  ImGui::LogFinish();

}


void _wrap_LogButtons_imgui_4778b1b319b813b6() {
  ImGui::LogButtons();

}


void _wrap_LogText_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::LogText((char const *)arg1,arg2);

  free(arg1);
}


void _wrap_PushClipRect_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  ImGui::PushClipRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);

}


void _wrap_PopClipRect_imgui_4778b1b319b813b6() {
  ImGui::PopClipRect();

}


bool _wrap_IsItemHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemRectHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemRectHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemActive_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemActive();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemClicked__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsItemClicked(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemClicked__SWIG_1_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemClicked();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsItemVisible_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemVisible();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyItemHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyItemHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyItemActive_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyItemActive();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetItemRectMin_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetItemRectMin();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetItemRectMax_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetItemRectMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetItemRectSize_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetItemRectSize();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_SetItemAllowOverlap_imgui_4778b1b319b813b6() {
  ImGui::SetItemAllowOverlap();

}


bool _wrap_IsWindowFocused_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowFocused();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsWindowRectHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsWindowRectHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRootWindowFocused_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsRootWindowFocused();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRootWindowOrAnyChildFocused_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsRootWindowOrAnyChildFocused();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRootWindowOrAnyChildHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsRootWindowOrAnyChildHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsAnyWindowHovered_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsAnyWindowHovered();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRectVisible__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRectVisible__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_GetTime_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetTime();
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_GetFrameCount_imgui_4778b1b319b813b6() {
  int result;
  intgo _swig_go_result;


  result = (int)ImGui::GetFrameCount();
  _swig_go_result = result;
  return _swig_go_result;
}


_gostring_ _wrap_GetStyleColorName_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiCol arg1 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = (ImGuiCol)_swig_go_0;

  result = (char *)ImGui::GetStyleColorName(arg1);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcItemRectClosestPoint__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, bool _swig_go_1, float _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  bool arg2 ;
  float arg3 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = ImGui::CalcItemRectClosestPoint((ImVec2 const &)*arg1,arg2,arg3);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcItemRectClosestPoint__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, bool _swig_go_1) {
  ImVec2 *arg1 = 0 ;
  bool arg2 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  result = ImGui::CalcItemRectClosestPoint((ImVec2 const &)*arg1,arg2);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcItemRectClosestPoint__SWIG_2_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = ImGui::CalcItemRectClosestPoint((ImVec2 const &)*arg1);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, float _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_1_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_2_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImVec2 *_wrap_CalcTextSize__SWIG_3_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = ImGui::CalcTextSize((char const *)arg1);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg1);
  return _swig_go_result;
}


void _wrap_CalcListClipping_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3) {
  int arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;

  ImGui::CalcListClipping(arg1,arg2,arg3,arg4);

}


bool _wrap_BeginChildFrame__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImGuiWindowFlags)_swig_go_2;

  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_BeginChildFrame__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = (ImGuiID)_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_EndChildFrame_imgui_4778b1b319b813b6() {
  ImGui::EndChildFrame();

}


ImVec4 *_wrap_ColorConvertU32ToFloat4_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImU32 arg1 ;
  ImVec4 result;
  ImVec4 *_swig_go_result;

  arg1 = (ImU32)_swig_go_0;

  result = ImGui::ColorConvertU32ToFloat4(arg1);
  *(ImVec4 **)&_swig_go_result = new ImVec4(result);
  return _swig_go_result;
}


intgo _wrap_ColorConvertFloat4ToU32_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (ImU32)ImGui::ColorConvertFloat4ToU32((ImVec4 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ColorConvertRGBtoHSV_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2, float *_swig_go_3, float *_swig_go_4, float *_swig_go_5) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(float **)&_swig_go_3;
  arg5 = *(float **)&_swig_go_4;
  arg6 = *(float **)&_swig_go_5;

  ImGui::ColorConvertRGBtoHSV(arg1,arg2,arg3,*arg4,*arg5,*arg6);

}


void _wrap_ColorConvertHSVtoRGB_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2, float *_swig_go_3, float *_swig_go_4, float *_swig_go_5) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(float **)&_swig_go_3;
  arg5 = *(float **)&_swig_go_4;
  arg6 = *(float **)&_swig_go_5;

  ImGui::ColorConvertHSVtoRGB(arg1,arg2,arg3,*arg4,*arg5,*arg6);

}


intgo _wrap_GetKeyIndex_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiKey arg1 ;
  int result;
  intgo _swig_go_result;

  arg1 = (ImGuiKey)_swig_go_0;

  result = (int)ImGui::GetKeyIndex(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyDown_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsKeyDown(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyPressed__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, bool _swig_go_1) {
  int arg1 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::IsKeyPressed(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyPressed__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsKeyPressed(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsKeyReleased_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsKeyReleased(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDown_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseDown(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseClicked__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, bool _swig_go_1) {
  int arg1 ;
  bool arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (bool)_swig_go_1;

  result = (bool)ImGui::IsMouseClicked(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseClicked__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseClicked(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDoubleClicked_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseDoubleClicked(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseReleased_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseReleased(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDragging__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (bool)ImGui::IsMouseDragging(arg1,arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDragging__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  bool result;
  bool _swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (bool)ImGui::IsMouseDragging(arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseDragging__SWIG_2_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsMouseDragging();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseHoveringRect__SWIG_0_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1, bool _swig_go_2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseHoveringRect__SWIG_1_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0, ImVec2 *_swig_go_1) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_GetMousePos_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetMousePos();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMousePosOnOpeningCurrentPopup_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetMousePosOnOpeningCurrentPopup();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMouseDragDelta__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = ImGui::GetMouseDragDelta(arg1,arg2);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMouseDragDelta__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = ImGui::GetMouseDragDelta(arg1);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_GetMouseDragDelta__SWIG_2_imgui_4778b1b319b813b6() {
  ImVec2 result;
  ImVec2 *_swig_go_result;


  result = ImGui::GetMouseDragDelta();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_ResetMouseDragDelta__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;

  arg1 = (int)_swig_go_0;

  ImGui::ResetMouseDragDelta(arg1);

}


void _wrap_ResetMouseDragDelta__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::ResetMouseDragDelta();

}


intgo _wrap_GetMouseCursor_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor result;
  intgo _swig_go_result;


  result = (ImGuiMouseCursor)ImGui::GetMouseCursor();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetMouseCursor_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImGuiMouseCursor arg1 ;

  arg1 = (ImGuiMouseCursor)_swig_go_0;

  ImGui::SetMouseCursor(arg1);

}


void _wrap_CaptureKeyboardFromApp__SWIG_0_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::CaptureKeyboardFromApp(arg1);

}


void _wrap_CaptureKeyboardFromApp__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::CaptureKeyboardFromApp();

}


void _wrap_CaptureMouseFromApp__SWIG_0_imgui_4778b1b319b813b6(bool _swig_go_0) {
  bool arg1 ;

  arg1 = (bool)_swig_go_0;

  ImGui::CaptureMouseFromApp(arg1);

}


void _wrap_CaptureMouseFromApp__SWIG_1_imgui_4778b1b319b813b6() {
  ImGui::CaptureMouseFromApp();

}


void *_wrap_MemAlloc_imgui_4778b1b319b813b6(long long _swig_go_0) {
  size_t arg1 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = (size_t)_swig_go_0;

  result = (void *)ImGui::MemAlloc(arg1);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_MemFree_imgui_4778b1b319b813b6(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  ImGui::MemFree(arg1);

}


_gostring_ _wrap_GetClipboardText_imgui_4778b1b319b813b6() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)ImGui::GetClipboardText();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_SetClipboardText_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  ImGui::SetClipboardText((char const *)arg1);

  free(arg1);
}


_gostring_ _wrap_GetVersion_imgui_4778b1b319b813b6() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)ImGui::GetVersion();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


ImGuiContext *_wrap_CreateContext__SWIG_0_imgui_4778b1b319b813b6(void* _swig_go_0, void* _swig_go_1) {
  void *(*arg1)(size_t) = (void *(*)(size_t)) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;

  arg1 = *(void *(**)(size_t))&_swig_go_0;
  arg2 = *(void (**)(void *))&_swig_go_1;

  result = (ImGuiContext *)ImGui::CreateContext(arg1,arg2);
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


ImGuiContext *_wrap_CreateContext__SWIG_1_imgui_4778b1b319b813b6(void* _swig_go_0) {
  void *(*arg1)(size_t) = (void *(*)(size_t)) 0 ;
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;

  arg1 = *(void *(**)(size_t))&_swig_go_0;

  result = (ImGuiContext *)ImGui::CreateContext(arg1);
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


ImGuiContext *_wrap_CreateContext__SWIG_2_imgui_4778b1b319b813b6() {
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;


  result = (ImGuiContext *)ImGui::CreateContext();
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


void _wrap_DestroyContext_imgui_4778b1b319b813b6(ImGuiContext *_swig_go_0) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;

  arg1 = *(ImGuiContext **)&_swig_go_0;

  ImGui::DestroyContext(arg1);

}


ImGuiContext *_wrap_GetCurrentContext_imgui_4778b1b319b813b6() {
  ImGuiContext *result = 0 ;
  ImGuiContext *_swig_go_result;


  result = (ImGuiContext *)ImGui::GetCurrentContext();
  *(ImGuiContext **)&_swig_go_result = (ImGuiContext *)result;
  return _swig_go_result;
}


void _wrap_SetCurrentContext_imgui_4778b1b319b813b6(ImGuiContext *_swig_go_0) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;

  arg1 = *(ImGuiContext **)&_swig_go_0;

  ImGui::SetCurrentContext(arg1);

}


bool _wrap_IsItemHoveredRect_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsItemHoveredRect();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsPosHoveringAnyWindow_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (bool)ImGui::IsPosHoveringAnyWindow((ImVec2 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseHoveringAnyWindow_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsMouseHoveringAnyWindow();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsMouseHoveringWindow_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::IsMouseHoveringWindow();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_4_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2, bool _swig_go_3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;
  arg4 = (bool)_swig_go_3;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,(char const *)arg2,arg3,arg4);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_5_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1, bool _swig_go_2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (bool)_swig_go_2;

  result = (bool)ImGui::CollapsingHeader((char const *)arg1,(char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


bool _wrap_CollapsingHeader__SWIG_6_imgui_4778b1b319b813b6(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)ImGui::CollapsingHeader((char const *)arg1,(char const *)arg2);
  _swig_go_result = result;
  free(arg1);
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_GetWindowFont_imgui_4778b1b319b813b6() {
  ImFont *result = 0 ;
  ImFont *_swig_go_result;


  result = (ImFont *)ImGui::GetWindowFont();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


float _wrap_GetWindowFontSize_imgui_4778b1b319b813b6() {
  float result;
  float _swig_go_result;


  result = (float)ImGui::GetWindowFontSize();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_SetScrollPosHere_imgui_4778b1b319b813b6() {
  ImGui::SetScrollPosHere();

}


bool _wrap_GetWindowCollapsed_imgui_4778b1b319b813b6() {
  bool result;
  bool _swig_go_result;


  result = (bool)ImGui::GetWindowCollapsed();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_IsRectClipped_imgui_4778b1b319b813b6(ImVec2 *_swig_go_0) {
  ImVec2 *arg1 = 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImVec2 **)&_swig_go_0;

  result = (bool)ImGui::IsRectClipped((ImVec2 const &)*arg1);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoTitleBar_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoTitleBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoResize_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoResize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoMove_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoMove;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoScrollbar_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoScrollWithMouse_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoScrollWithMouse;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoCollapse_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoCollapse;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_AlwaysAutoResize_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysAutoResize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_ShowBorders_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_ShowBorders;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoSavedSettings_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoSavedSettings;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoInputs_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoInputs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_MenuBar_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_MenuBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_HorizontalScrollbar_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_HorizontalScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoFocusOnAppearing_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoFocusOnAppearing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_NoBringToFrontOnFocus_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_NoBringToFrontOnFocus;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_AlwaysVerticalScrollbar_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysVerticalScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_AlwaysHorizontalScrollbar_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysHorizontalScrollbar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_AlwaysUseWindowPadding_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_AlwaysUseWindowPadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_ChildWindow_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_ChildWindow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_ComboBox_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_ComboBox;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_Tooltip_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_Tooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_Popup_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_Popup;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_Modal_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_Modal;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiWindowFlags_ChildMenu_imgui_4778b1b319b813b6() {
  ImGuiWindowFlags_ result;
  intgo _swig_go_result;


  result = ImGuiWindowFlags_ChildMenu;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CharsDecimal_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsDecimal;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CharsHexadecimal_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsHexadecimal;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CharsUppercase_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsUppercase;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CharsNoBlank_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CharsNoBlank;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_AutoSelectAll_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_AutoSelectAll;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_EnterReturnsTrue_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_EnterReturnsTrue;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CallbackCompletion_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackCompletion;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CallbackHistory_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackHistory;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CallbackAlways_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackAlways;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CallbackCharFilter_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CallbackCharFilter;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_AllowTabInput_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_AllowTabInput;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_CtrlEnterForNewLine_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_CtrlEnterForNewLine;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_NoHorizontalScroll_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_NoHorizontalScroll;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_AlwaysInsertMode_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_AlwaysInsertMode;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_ReadOnly_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_ReadOnly;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_Password_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_Password;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiInputTextFlags_Multiline_imgui_4778b1b319b813b6() {
  ImGuiInputTextFlags_ result;
  intgo _swig_go_result;


  result = ImGuiInputTextFlags_Multiline;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_Selected_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Selected;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_Framed_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Framed;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_AllowOverlapMode_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_AllowOverlapMode;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_NoTreePushOnOpen_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_NoTreePushOnOpen;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_NoAutoOpenOnLog_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_NoAutoOpenOnLog;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_DefaultOpen_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_DefaultOpen;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_OpenOnDoubleClick_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_OpenOnDoubleClick;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_OpenOnArrow_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_OpenOnArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_Leaf_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Leaf;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_Bullet_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_Bullet;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiTreeNodeFlags_CollapsingHeader_imgui_4778b1b319b813b6() {
  ImGuiTreeNodeFlags_ result;
  intgo _swig_go_result;


  result = ImGuiTreeNodeFlags_CollapsingHeader;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSelectableFlags_DontClosePopups_imgui_4778b1b319b813b6() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_DontClosePopups;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSelectableFlags_SpanAllColumns_imgui_4778b1b319b813b6() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_SpanAllColumns;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSelectableFlags_AllowDoubleClick_imgui_4778b1b319b813b6() {
  ImGuiSelectableFlags_ result;
  intgo _swig_go_result;


  result = ImGuiSelectableFlags_AllowDoubleClick;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Tab_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Tab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_LeftArrow_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_LeftArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_RightArrow_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_RightArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_UpArrow_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_UpArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_DownArrow_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_DownArrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_PageUp_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_PageUp;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_PageDown_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_PageDown;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Home_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Home;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_End_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_End;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Delete_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Delete;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Backspace_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Backspace;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Enter_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Enter;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Escape_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Escape;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_A_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_A;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_C_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_C;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_V_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_V;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_X_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_X;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Y_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Y;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_Z_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_Z;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiKey_COUNT_imgui_4778b1b319b813b6() {
  ImGuiKey_ result;
  intgo _swig_go_result;


  result = ImGuiKey_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_Text_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Text;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_TextDisabled_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TextDisabled;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_WindowBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_WindowBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ChildWindowBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ChildWindowBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_PopupBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PopupBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_Border_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Border;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_BorderShadow_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_BorderShadow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_FrameBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_FrameBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_FrameBgHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_FrameBgHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_FrameBgActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_FrameBgActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_TitleBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TitleBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_TitleBgCollapsed_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TitleBgCollapsed;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_TitleBgActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TitleBgActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_MenuBarBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_MenuBarBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ScrollbarBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ScrollbarGrab_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarGrab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ScrollbarGrabHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarGrabHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ScrollbarGrabActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ScrollbarGrabActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ComboBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ComboBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_CheckMark_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_CheckMark;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_SliderGrab_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SliderGrab;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_SliderGrabActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SliderGrabActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_Button_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Button;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ButtonHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ButtonHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ButtonActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ButtonActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_Header_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Header;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_HeaderHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_HeaderHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_HeaderActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_HeaderActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_Separator_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Separator;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_SeparatorHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SeparatorHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_SeparatorActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_SeparatorActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ResizeGrip_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ResizeGrip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ResizeGripHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ResizeGripHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ResizeGripActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ResizeGripActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_CloseButton_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_CloseButton;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_CloseButtonHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_CloseButtonHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_CloseButtonActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_CloseButtonActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_PlotLines_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotLines;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_PlotLinesHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotLinesHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_PlotHistogram_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotHistogram;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_PlotHistogramHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_PlotHistogramHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_TextSelectedBg_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_TextSelectedBg;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ModalWindowDarkening_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ModalWindowDarkening;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_COUNT_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_COUNT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_Column_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_Column;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ColumnHovered_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ColumnHovered;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCol_ColumnActive_imgui_4778b1b319b813b6() {
  ImGuiCol_ result;
  intgo _swig_go_result;


  result = ImGuiCol_ColumnActive;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_Alpha_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_Alpha;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_WindowPadding_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowPadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_WindowRounding_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_WindowMinSize_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_WindowMinSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_ChildWindowRounding_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ChildWindowRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_FramePadding_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_FramePadding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_FrameRounding_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_FrameRounding;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_ItemSpacing_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ItemSpacing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_ItemInnerSpacing_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ItemInnerSpacing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_IndentSpacing_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_IndentSpacing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_GrabMinSize_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_GrabMinSize;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_ButtonTextAlign_imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_ButtonTextAlign;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStyleVar_Count__imgui_4778b1b319b813b6() {
  ImGuiStyleVar_ result;
  intgo _swig_go_result;


  result = ImGuiStyleVar_Count_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoAlpha_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoAlpha;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoPicker_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoPicker;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoOptions_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoOptions;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoSmallPreview_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoSmallPreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoInputs_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoInputs;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoTooltip_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoTooltip;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoLabel_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoLabel;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_NoSidePreview_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_NoSidePreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_AlphaBar_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_AlphaBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_AlphaPreview_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_AlphaPreview;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_AlphaPreviewHalf_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_AlphaPreviewHalf;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_HDR_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_HDR;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_RGB_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_RGB;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_HSV_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_HSV;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_HEX_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_HEX;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_Uint8_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_Uint8;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_Float_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_Float;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_PickerHueBar_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_PickerHueBar;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags_PickerHueWheel_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags_PickerHueWheel;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags__InputsMask_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__InputsMask;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags__DataTypeMask_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__DataTypeMask;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags__PickerMask_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__PickerMask;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiColorEditFlags__OptionsDefault_imgui_4778b1b319b813b6() {
  ImGuiColorEditFlags_ result;
  intgo _swig_go_result;


  result = ImGuiColorEditFlags__OptionsDefault;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_None_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_None;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_Arrow_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_Arrow;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_TextInput_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_TextInput;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_Move_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_Move;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_ResizeNS_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeNS;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_ResizeEW_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeEW;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_ResizeNESW_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeNESW;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_ResizeNWSE_imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_ResizeNWSE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiMouseCursor_Count__imgui_4778b1b319b813b6() {
  ImGuiMouseCursor_ result;
  intgo _swig_go_result;


  result = ImGuiMouseCursor_Count_;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCond_Always_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_Always;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCond_Once_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_Once;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCond_FirstUseEver_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_FirstUseEver;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiCond_Appearing_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiCond_Appearing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSetCond_Always_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiSetCond_Always;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSetCond_Once_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiSetCond_Once;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSetCond_FirstUseEver_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiSetCond_FirstUseEver;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ImGuiSetCond_Appearing_imgui_4778b1b319b813b6() {
  ImGuiCond_ result;
  intgo _swig_go_result;


  result = ImGuiSetCond_Appearing;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_Alpha_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Alpha = arg2;

}


float _wrap_ImGuiStyle_Alpha_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->Alpha);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_WindowPadding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->WindowPadding = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_WindowPadding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->WindowPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_WindowMinSize_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->WindowMinSize = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_WindowMinSize_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->WindowMinSize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_WindowRounding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->WindowRounding = arg2;

}


float _wrap_ImGuiStyle_WindowRounding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->WindowRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_WindowTitleAlign_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->WindowTitleAlign = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_WindowTitleAlign_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->WindowTitleAlign);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ChildWindowRounding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ChildWindowRounding = arg2;

}


float _wrap_ImGuiStyle_ChildWindowRounding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ChildWindowRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_FramePadding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->FramePadding = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_FramePadding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->FramePadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_FrameRounding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FrameRounding = arg2;

}


float _wrap_ImGuiStyle_FrameRounding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->FrameRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ItemSpacing_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->ItemSpacing = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_ItemSpacing_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->ItemSpacing);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ItemInnerSpacing_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->ItemInnerSpacing = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_ItemInnerSpacing_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->ItemInnerSpacing);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_TouchExtraPadding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->TouchExtraPadding = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_TouchExtraPadding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->TouchExtraPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_IndentSpacing_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->IndentSpacing = arg2;

}


float _wrap_ImGuiStyle_IndentSpacing_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->IndentSpacing);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ColumnsMinSpacing_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ColumnsMinSpacing = arg2;

}


float _wrap_ImGuiStyle_ColumnsMinSpacing_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ColumnsMinSpacing);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ScrollbarSize_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ScrollbarSize = arg2;

}


float _wrap_ImGuiStyle_ScrollbarSize_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ScrollbarSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ScrollbarRounding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ScrollbarRounding = arg2;

}


float _wrap_ImGuiStyle_ScrollbarRounding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->ScrollbarRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_GrabMinSize_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->GrabMinSize = arg2;

}


float _wrap_ImGuiStyle_GrabMinSize_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->GrabMinSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_GrabRounding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->GrabRounding = arg2;

}


float _wrap_ImGuiStyle_GrabRounding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->GrabRounding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_ButtonTextAlign_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->ButtonTextAlign = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_ButtonTextAlign_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->ButtonTextAlign);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_DisplayWindowPadding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayWindowPadding = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_DisplayWindowPadding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayWindowPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_DisplaySafeAreaPadding_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplaySafeAreaPadding = *arg2;

}


ImVec2 *_wrap_ImGuiStyle_DisplaySafeAreaPadding_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplaySafeAreaPadding);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_AntiAliasedLines_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, bool _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->AntiAliasedLines = arg2;

}


bool _wrap_ImGuiStyle_AntiAliasedLines_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (bool) ((arg1)->AntiAliasedLines);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_AntiAliasedShapes_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, bool _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->AntiAliasedShapes = arg2;

}


bool _wrap_ImGuiStyle_AntiAliasedShapes_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (bool) ((arg1)->AntiAliasedShapes);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_CurveTessellationTol_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, float _swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->CurveTessellationTol = arg2;

}


float _wrap_ImGuiStyle_CurveTessellationTol_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (float) ((arg1)->CurveTessellationTol);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStyle_Colors_set_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0, ImVec4 *_swig_go_1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *arg2 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->Colors;
    for (ii = 0; ii < (size_t)ImGuiCol_COUNT; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }

}


ImVec4 (*_wrap_ImGuiStyle_Colors_get_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0))[ImGuiCol_COUNT] {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *result = 0 ;
  ImVec4 (*_swig_go_result)[ImGuiCol_COUNT];

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  result = (ImVec4 *)(ImVec4 *) ((arg1)->Colors);
  *(ImVec4 **)&_swig_go_result = result;
  return _swig_go_result;
}


ImGuiStyle *_wrap_new_ImGuiStyle_imgui_4778b1b319b813b6() {
  ImGuiStyle *result = 0 ;
  ImGuiStyle *_swig_go_result;


  result = (ImGuiStyle *)new ImGuiStyle();
  *(ImGuiStyle **)&_swig_go_result = (ImGuiStyle *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiStyle_imgui_4778b1b319b813b6(ImGuiStyle *_swig_go_0) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;

  arg1 = *(ImGuiStyle **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiIO_DisplaySize_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplaySize = *arg2;

}


ImVec2 *_wrap_ImGuiIO_DisplaySize_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplaySize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_DeltaTime_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->DeltaTime = arg2;

}


float _wrap_ImGuiIO_DeltaTime_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->DeltaTime);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_IniSavingRate_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->IniSavingRate = arg2;

}


float _wrap_ImGuiIO_IniSavingRate_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->IniSavingRate);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_IniFilename_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->IniFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->IniFilename, (const char *)arg2);
    } else {
      arg1->IniFilename = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_ImGuiIO_IniFilename_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *) ((arg1)->IniFilename);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImGuiIO_LogFilename_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->LogFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->LogFilename, (const char *)arg2);
    } else {
      arg1->LogFilename = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_ImGuiIO_LogFilename_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *) ((arg1)->LogFilename);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDoubleClickTime_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseDoubleClickTime = arg2;

}


float _wrap_ImGuiIO_MouseDoubleClickTime_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseDoubleClickTime);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDoubleClickMaxDist_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseDoubleClickMaxDist = arg2;

}


float _wrap_ImGuiIO_MouseDoubleClickMaxDist_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseDoubleClickMaxDist);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDragThreshold_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseDragThreshold = arg2;

}


float _wrap_ImGuiIO_MouseDragThreshold_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseDragThreshold);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeyMap_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, intgo *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(int **)&_swig_go_1;

  {
    size_t ii;
    int *b = (int *) arg1->KeyMap;
    for (ii = 0; ii < (size_t)ImGuiKey_COUNT; ii++) b[ii] = *((int *) arg2 + ii);
  }

}


intgo *_wrap_ImGuiIO_KeyMap_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *result = 0 ;
  intgo *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int *)(int *) ((arg1)->KeyMap);
  *(int **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeyRepeatDelay_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->KeyRepeatDelay = arg2;

}


float _wrap_ImGuiIO_KeyRepeatDelay_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->KeyRepeatDelay);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeyRepeatRate_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->KeyRepeatRate = arg2;

}


float _wrap_ImGuiIO_KeyRepeatRate_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->KeyRepeatRate);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_UserData_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserData = arg2;

}


void *_wrap_ImGuiIO_UserData_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->UserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_Fonts_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImFontAtlas *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImFontAtlas **)&_swig_go_1;

  if (arg1) (arg1)->Fonts = arg2;

}


ImFontAtlas *_wrap_ImGuiIO_Fonts_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *result = 0 ;
  ImFontAtlas *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImFontAtlas *) ((arg1)->Fonts);
  *(ImFontAtlas **)&_swig_go_result = (ImFontAtlas *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_FontGlobalScale_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FontGlobalScale = arg2;

}


float _wrap_ImGuiIO_FontGlobalScale_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->FontGlobalScale);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_FontAllowUserScaling_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->FontAllowUserScaling = arg2;

}


bool _wrap_ImGuiIO_FontAllowUserScaling_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->FontAllowUserScaling);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_FontDefault_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImFont *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;

  if (arg1) (arg1)->FontDefault = arg2;

}


ImFont *_wrap_ImGuiIO_FontDefault_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImFont *) ((arg1)->FontDefault);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_DisplayFramebufferScale_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayFramebufferScale = *arg2;

}


ImVec2 *_wrap_ImGuiIO_DisplayFramebufferScale_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayFramebufferScale);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_DisplayVisibleMin_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayVisibleMin = *arg2;

}


ImVec2 *_wrap_ImGuiIO_DisplayVisibleMin_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayVisibleMin);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_DisplayVisibleMax_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayVisibleMax = *arg2;

}


ImVec2 *_wrap_ImGuiIO_DisplayVisibleMax_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayVisibleMax);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_OSXBehaviors_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->OSXBehaviors = arg2;

}


bool _wrap_ImGuiIO_OSXBehaviors_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->OSXBehaviors);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_RenderDrawListsFn_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(ImDrawData *) = (void (*)(ImDrawData *)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void (**)(ImDrawData *))&_swig_go_1;

  if (arg1) (arg1)->RenderDrawListsFn = arg2;

}


void* _wrap_ImGuiIO_RenderDrawListsFn_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(ImDrawData *) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void (*)(ImDrawData *)) ((arg1)->RenderDrawListsFn);
  *(void (**)(ImDrawData *))&_swig_go_result = (void (*)(ImDrawData *))result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_GetClipboardTextFn_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*arg2)(void *) = (char *(*)(void *)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(char *(**)(void *))&_swig_go_1;

  if (arg1) (arg1)->GetClipboardTextFn = (char const *(*)(void *))arg2;

}


void* _wrap_ImGuiIO_GetClipboardTextFn_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*result)(void *) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (char *(*)(void *)) ((arg1)->GetClipboardTextFn);
  *(char *(**)(void *))&_swig_go_result = (char *(*)(void *))result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_SetClipboardTextFn_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void (**)(void *,char const *))&_swig_go_1;

  if (arg1) (arg1)->SetClipboardTextFn = arg2;

}


void* _wrap_ImGuiIO_SetClipboardTextFn_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(void *,char const *) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void (*)(void *,char const *)) ((arg1)->SetClipboardTextFn);
  *(void (**)(void *,char const *))&_swig_go_result = (void (*)(void *,char const *))result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_ClipboardUserData_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->ClipboardUserData = arg2;

}


void *_wrap_ImGuiIO_ClipboardUserData_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->ClipboardUserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MemAllocFn_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *(*arg2)(size_t) = (void *(*)(size_t)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void *(**)(size_t))&_swig_go_1;

  if (arg1) (arg1)->MemAllocFn = arg2;

}


void* _wrap_ImGuiIO_MemAllocFn_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *(*result)(size_t) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *(*)(size_t)) ((arg1)->MemAllocFn);
  *(void *(**)(size_t))&_swig_go_result = (void *(*)(size_t))result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MemFreeFn_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(void *) = (void (*)(void *)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void (**)(void *))&_swig_go_1;

  if (arg1) (arg1)->MemFreeFn = arg2;

}


void* _wrap_ImGuiIO_MemFreeFn_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(void *) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void (*)(void *)) ((arg1)->MemFreeFn);
  *(void (**)(void *))&_swig_go_result = (void (*)(void *))result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_ImeSetInputScreenPosFn_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void* _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(int,int) = (void (*)(int,int)) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void (**)(int,int))&_swig_go_1;

  if (arg1) (arg1)->ImeSetInputScreenPosFn = arg2;

}


void* _wrap_ImGuiIO_ImeSetInputScreenPosFn_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(int,int) = 0 ;
  void* _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void (*)(int,int)) ((arg1)->ImeSetInputScreenPosFn);
  *(void (**)(int,int))&_swig_go_result = (void (*)(int,int))result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_ImeWindowHandle_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, void *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->ImeWindowHandle = arg2;

}


void *_wrap_ImGuiIO_ImeWindowHandle_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (void *) ((arg1)->ImeWindowHandle);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MousePos_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->MousePos = *arg2;

}


ImVec2 *_wrap_ImGuiIO_MousePos_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->MousePos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDown_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDown;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


bool *_wrap_ImGuiIO_MouseDown_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->MouseDown);
  *(bool **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseWheel_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->MouseWheel = arg2;

}


float _wrap_ImGuiIO_MouseWheel_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->MouseWheel);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDrawCursor_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->MouseDrawCursor = arg2;

}


bool _wrap_ImGuiIO_MouseDrawCursor_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->MouseDrawCursor);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeyCtrl_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeyCtrl = arg2;

}


bool _wrap_ImGuiIO_KeyCtrl_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeyCtrl);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeyShift_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeyShift = arg2;

}


bool _wrap_ImGuiIO_KeyShift_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeyShift);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeyAlt_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeyAlt = arg2;

}


bool _wrap_ImGuiIO_KeyAlt_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeyAlt);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeySuper_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->KeySuper = arg2;

}


bool _wrap_ImGuiIO_KeySuper_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->KeySuper);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeysDown_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->KeysDown;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


bool *_wrap_ImGuiIO_KeysDown_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->KeysDown);
  *(bool **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_InputCharacters_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, short *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImWchar **)&_swig_go_1;

  {
    size_t ii;
    ImWchar *b = (ImWchar *) arg1->InputCharacters;
    for (ii = 0; ii < (size_t)16+1; ii++) b[ii] = *((ImWchar *) arg2 + ii);
  }

}


short *_wrap_ImGuiIO_InputCharacters_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImWchar *)(ImWchar *) ((arg1)->InputCharacters);
  *(ImWchar **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_AddInputCharacter_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, short _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  (arg1)->AddInputCharacter(arg2);

}


void _wrap_ImGuiIO_AddInputCharactersUTF8_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  (arg1)->AddInputCharactersUTF8((char const *)arg2);

  free(arg2);
}


void _wrap_ImGuiIO_ClearInputCharacters_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  (arg1)->ClearInputCharacters();

}


void _wrap_ImGuiIO_WantCaptureMouse_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantCaptureMouse = arg2;

}


bool _wrap_ImGuiIO_WantCaptureMouse_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantCaptureMouse);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_WantCaptureKeyboard_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantCaptureKeyboard = arg2;

}


bool _wrap_ImGuiIO_WantCaptureKeyboard_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantCaptureKeyboard);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_WantTextInput_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->WantTextInput = arg2;

}


bool _wrap_ImGuiIO_WantTextInput_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool) ((arg1)->WantTextInput);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_Framerate_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Framerate = arg2;

}


float _wrap_ImGuiIO_Framerate_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float) ((arg1)->Framerate);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MetricsAllocs_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsAllocs = arg2;

}


intgo _wrap_ImGuiIO_MetricsAllocs_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsAllocs);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MetricsRenderVertices_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsRenderVertices = arg2;

}


intgo _wrap_ImGuiIO_MetricsRenderVertices_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsRenderVertices);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MetricsRenderIndices_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsRenderIndices = arg2;

}


intgo _wrap_ImGuiIO_MetricsRenderIndices_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsRenderIndices);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MetricsActiveWindows_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, intgo _swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsActiveWindows = arg2;

}


intgo _wrap_ImGuiIO_MetricsActiveWindows_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (int) ((arg1)->MetricsActiveWindows);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDelta_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->MouseDelta = *arg2;

}


ImVec2 *_wrap_ImGuiIO_MouseDelta_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->MouseDelta);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MousePosPrev_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->MousePosPrev = *arg2;

}


ImVec2 *_wrap_ImGuiIO_MousePosPrev_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->MousePosPrev);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseClicked_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->MouseClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


bool *_wrap_ImGuiIO_MouseClicked_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->MouseClicked);
  *(bool **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseClickedPos_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseClickedPos;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }

}


ImVec2 (*_wrap_ImGuiIO_MouseClickedPos_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0))[5] {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 (*_swig_go_result)[5];

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseClickedPos);
  *(ImVec2 **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseClickedTime_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->MouseClickedTime;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_ImGuiIO_MouseClickedTime_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->MouseClickedTime);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDoubleClicked_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDoubleClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


bool *_wrap_ImGuiIO_MouseDoubleClicked_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->MouseDoubleClicked);
  *(bool **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseReleased_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->MouseReleased;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


bool *_wrap_ImGuiIO_MouseReleased_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->MouseReleased);
  *(bool **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDownOwned_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, bool *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(bool **)&_swig_go_1;

  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownOwned;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }

}


bool *_wrap_ImGuiIO_MouseDownOwned_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (bool *)(bool *) ((arg1)->MouseDownOwned);
  *(bool **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDownDuration_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDuration;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_ImGuiIO_MouseDownDuration_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->MouseDownDuration);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDownDurationPrev_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDurationPrev;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_ImGuiIO_MouseDownDurationPrev_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->MouseDownDurationPrev);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_MouseDragMaxDistanceSqr_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->MouseDragMaxDistanceSqr;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_ImGuiIO_MouseDragMaxDistanceSqr_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->MouseDragMaxDistanceSqr);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeysDownDuration_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->KeysDownDuration;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_ImGuiIO_KeysDownDuration_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->KeysDownDuration);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiIO_KeysDownDurationPrev_set_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0, float *_swig_go_1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;
  arg2 = *(float **)&_swig_go_1;

  {
    size_t ii;
    float *b = (float *) arg1->KeysDownDurationPrev;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((float *) arg2 + ii);
  }

}


float *_wrap_ImGuiIO_KeysDownDurationPrev_get_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  result = (float *)(float *) ((arg1)->KeysDownDurationPrev);
  *(float **)&_swig_go_result = result;
  return _swig_go_result;
}


ImGuiIO *_wrap_new_ImGuiIO_imgui_4778b1b319b813b6() {
  ImGuiIO *result = 0 ;
  ImGuiIO *_swig_go_result;


  result = (ImGuiIO *)new ImGuiIO();
  *(ImGuiIO **)&_swig_go_result = (ImGuiIO *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiIO_imgui_4778b1b319b813b6(ImGuiIO *_swig_go_0) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;

  arg1 = *(ImGuiIO **)&_swig_go_0;

  delete arg1;

}


ImGuiOnceUponAFrame *_wrap_new_ImGuiOnceUponAFrame_imgui_4778b1b319b813b6() {
  ImGuiOnceUponAFrame *result = 0 ;
  ImGuiOnceUponAFrame *_swig_go_result;


  result = (ImGuiOnceUponAFrame *)new ImGuiOnceUponAFrame();
  *(ImGuiOnceUponAFrame **)&_swig_go_result = (ImGuiOnceUponAFrame *)result;
  return _swig_go_result;
}


void _wrap_ImGuiOnceUponAFrame_RefFrame_set_imgui_4778b1b319b813b6(ImGuiOnceUponAFrame *_swig_go_0, intgo _swig_go_1) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiOnceUponAFrame **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->RefFrame = arg2;

}


intgo _wrap_ImGuiOnceUponAFrame_RefFrame_get_imgui_4778b1b319b813b6(ImGuiOnceUponAFrame *_swig_go_0) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiOnceUponAFrame **)&_swig_go_0;

  result = (int) ((arg1)->RefFrame);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImGuiOnceUponAFrame_Bool_imgui_4778b1b319b813b6(ImGuiOnceUponAFrame *_swig_go_0) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiOnceUponAFrame **)&_swig_go_0;

  result = (bool)((ImGuiOnceUponAFrame const *)arg1)->operator bool();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiOnceUponAFrame_imgui_4778b1b319b813b6(ImGuiOnceUponAFrame *_swig_go_0) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;

  arg1 = *(ImGuiOnceUponAFrame **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiTextFilter_InputBuf_set_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 ;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if(arg2) {
      strncpy((char*)arg1->InputBuf, (const char *)arg2, 256-1);
      arg1->InputBuf[256-1] = 0;
    } else {
      arg1->InputBuf[0] = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_ImGuiTextFilter_InputBuf_get_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  result = (char *)(char *) ((arg1)->InputBuf);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImGuiTextFilter_Filters_set_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, ImVector< ImGuiTextFilter::TextRange > *_swig_go_1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector< ImGuiTextFilter::TextRange > *arg2 = (ImVector< ImGuiTextFilter::TextRange > *) 0 ;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;
  arg2 = *(ImVector< ImGuiTextFilter::TextRange > **)&_swig_go_1;

  if (arg1) (arg1)->Filters = *arg2;

}


ImVector< ImGuiTextFilter::TextRange > *_wrap_ImGuiTextFilter_Filters_get_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector< ImGuiTextFilter::TextRange > *result = 0 ;
  ImVector< ImGuiTextFilter::TextRange > *_swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  result = (ImVector< ImGuiTextFilter::TextRange > *)& ((arg1)->Filters);
  *(ImVector< ImGuiTextFilter::TextRange > **)&_swig_go_result = (ImVector< ImGuiTextFilter::TextRange > *)result;
  return _swig_go_result;
}


void _wrap_ImGuiTextFilter_CountGrep_set_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->CountGrep = arg2;

}


intgo _wrap_ImGuiTextFilter_CountGrep_get_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  result = (int) ((arg1)->CountGrep);
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiTextFilter *_wrap_new_ImGuiTextFilter__SWIG_0_imgui_4778b1b319b813b6(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  ImGuiTextFilter *result = 0 ;
  ImGuiTextFilter *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (ImGuiTextFilter *)new ImGuiTextFilter((char const *)arg1);
  *(ImGuiTextFilter **)&_swig_go_result = (ImGuiTextFilter *)result;
  free(arg1);
  return _swig_go_result;
}


ImGuiTextFilter *_wrap_new_ImGuiTextFilter__SWIG_1_imgui_4778b1b319b813b6() {
  ImGuiTextFilter *result = 0 ;
  ImGuiTextFilter *_swig_go_result;


  result = (ImGuiTextFilter *)new ImGuiTextFilter();
  *(ImGuiTextFilter **)&_swig_go_result = (ImGuiTextFilter *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiTextFilter_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiTextFilter_Clear_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  (arg1)->Clear();

}


bool _wrap_ImGuiTextFilter_Draw__SWIG_0_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;

  result = (bool)(arg1)->Draw((char const *)arg2,arg3);
  _swig_go_result = result;
  free(arg2);
  return _swig_go_result;
}


bool _wrap_ImGuiTextFilter_Draw__SWIG_1_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)(arg1)->Draw((char const *)arg2);
  _swig_go_result = result;
  free(arg2);
  return _swig_go_result;
}


bool _wrap_ImGuiTextFilter_Draw__SWIG_2_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  result = (bool)(arg1)->Draw();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImGuiTextFilter_PassFilter__SWIG_0_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2,(char const *)arg3);
  _swig_go_result = result;
  free(arg2);
  free(arg3);
  return _swig_go_result;
}


bool _wrap_ImGuiTextFilter_PassFilter__SWIG_1_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2);
  _swig_go_result = result;
  free(arg2);
  return _swig_go_result;
}


bool _wrap_ImGuiTextFilter_IsActive_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  result = (bool)((ImGuiTextFilter const *)arg1)->IsActive();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextFilter_Build_imgui_4778b1b319b813b6(ImGuiTextFilter *_swig_go_0) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;

  arg1 = *(ImGuiTextFilter **)&_swig_go_0;

  (arg1)->Build();

}


void _wrap_ImGuiTextBuffer_Buf_set_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0, ImVector< char > *_swig_go_1) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector< char > *arg2 = (ImVector< char > *) 0 ;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;
  arg2 = *(ImVector< char > **)&_swig_go_1;

  if (arg1) (arg1)->Buf = *arg2;

}


ImVector< char > *_wrap_ImGuiTextBuffer_Buf_get_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector< char > *result = 0 ;
  ImVector< char > *_swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  result = (ImVector< char > *)& ((arg1)->Buf);
  *(ImVector< char > **)&_swig_go_result = (ImVector< char > *)result;
  return _swig_go_result;
}


ImGuiTextBuffer *_wrap_new_ImGuiTextBuffer_imgui_4778b1b319b813b6() {
  ImGuiTextBuffer *result = 0 ;
  ImGuiTextBuffer *_swig_go_result;


  result = (ImGuiTextBuffer *)new ImGuiTextBuffer();
  *(ImGuiTextBuffer **)&_swig_go_result = (ImGuiTextBuffer *)result;
  return _swig_go_result;
}


char _wrap_ImGuiTextBuffer_Get_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int arg2 ;
  char result;
  char _swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  result = (char)(arg1)->operator [](arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


_gostring_ _wrap_ImGuiTextBuffer_begin_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  result = (char *)((ImGuiTextBuffer const *)arg1)->begin();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


_gostring_ _wrap_ImGuiTextBuffer_end_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  result = (char *)((ImGuiTextBuffer const *)arg1)->end();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


intgo _wrap_ImGuiTextBuffer_size_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  result = (int)((ImGuiTextBuffer const *)arg1)->size();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImGuiTextBuffer_empty_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  result = (bool)(arg1)->empty();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextBuffer_clear_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  (arg1)->clear();

}


_gostring_ _wrap_ImGuiTextBuffer_c_str_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  result = (char *)((ImGuiTextBuffer const *)arg1)->c_str();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImGuiTextBuffer_append_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  (arg1)->append((char const *)arg2,arg3);

  free(arg2);
}


void _wrap_ImGuiTextBuffer_appendv_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0, _gostring_ _swig_go_1, va_list *_swig_go_2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  argp3 = (va_list *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null va_list");
  }
  arg3 = (va_list)*argp3;


  (arg1)->appendv((char const *)arg2,arg3);

  free(arg2);
}


void _wrap_delete_ImGuiTextBuffer_imgui_4778b1b319b813b6(ImGuiTextBuffer *_swig_go_0) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;

  arg1 = *(ImGuiTextBuffer **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiStorage_Data_set_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, ImVector< ImGuiStorage::Pair > *_swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector< ImGuiStorage::Pair > *arg2 = (ImVector< ImGuiStorage::Pair > *) 0 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = *(ImVector< ImGuiStorage::Pair > **)&_swig_go_1;

  if (arg1) (arg1)->Data = *arg2;

}


ImVector< ImGuiStorage::Pair > *_wrap_ImGuiStorage_Data_get_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector< ImGuiStorage::Pair > *result = 0 ;
  ImVector< ImGuiStorage::Pair > *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;

  result = (ImVector< ImGuiStorage::Pair > *)& ((arg1)->Data);
  *(ImVector< ImGuiStorage::Pair > **)&_swig_go_result = (ImVector< ImGuiStorage::Pair > *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStorage_Clear_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;

  (arg1)->Clear();

}


intgo _wrap_ImGuiStorage_GetInt__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_ImGuiStorage_GetInt__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStorage_SetInt_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (int)_swig_go_2;

  (arg1)->SetInt(arg2,arg3);

}


bool _wrap_ImGuiStorage_GetBool__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImGuiStorage_GetBool__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStorage_SetBool_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  (arg1)->SetBool(arg2,arg3);

}


float _wrap_ImGuiStorage_GetFloat__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2,arg3);
  _swig_go_result = result;
  return _swig_go_result;
}


float _wrap_ImGuiStorage_GetFloat__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiStorage_SetFloat_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (float)_swig_go_2;

  (arg1)->SetFloat(arg2,arg3);

}


void *_wrap_ImGuiStorage_GetVoidPtr_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (void *)((ImGuiStorage const *)arg1)->GetVoidPtr(arg2);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImGuiStorage_SetVoidPtr_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, void *_swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;

  (arg1)->SetVoidPtr(arg2,arg3);

}


intgo *_wrap_ImGuiStorage_GetIntRef__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int *result = 0 ;
  intgo *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (int *)(arg1)->GetIntRef(arg2,arg3);
  *(int **)&_swig_go_result = (int *)result;
  return _swig_go_result;
}


intgo *_wrap_ImGuiStorage_GetIntRef__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int *result = 0 ;
  intgo *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (int *)(arg1)->GetIntRef(arg2);
  *(int **)&_swig_go_result = (int *)result;
  return _swig_go_result;
}


bool *_wrap_ImGuiStorage_GetBoolRef__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  result = (bool *)(arg1)->GetBoolRef(arg2,arg3);
  *(bool **)&_swig_go_result = (bool *)result;
  return _swig_go_result;
}


bool *_wrap_ImGuiStorage_GetBoolRef__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool *result = 0 ;
  bool *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (bool *)(arg1)->GetBoolRef(arg2);
  *(bool **)&_swig_go_result = (bool *)result;
  return _swig_go_result;
}


float *_wrap_ImGuiStorage_GetFloatRef__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (float *)(arg1)->GetFloatRef(arg2,arg3);
  *(float **)&_swig_go_result = (float *)result;
  return _swig_go_result;
}


float *_wrap_ImGuiStorage_GetFloatRef__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float *result = 0 ;
  float *_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (float *)(arg1)->GetFloatRef(arg2);
  *(float **)&_swig_go_result = (float *)result;
  return _swig_go_result;
}


void **_wrap_ImGuiStorage_GetVoidPtrRef__SWIG_0_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1, void *_swig_go_2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  void **result = 0 ;
  void **_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;
  arg3 = *(void **)&_swig_go_2;

  result = (void **)(arg1)->GetVoidPtrRef(arg2,arg3);
  *(void ***)&_swig_go_result = (void **)result;
  return _swig_go_result;
}


void **_wrap_ImGuiStorage_GetVoidPtrRef__SWIG_1_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void **result = 0 ;
  void **_swig_go_result;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (ImGuiID)_swig_go_1;

  result = (void **)(arg1)->GetVoidPtrRef(arg2);
  *(void ***)&_swig_go_result = (void **)result;
  return _swig_go_result;
}


void _wrap_ImGuiStorage_SetAllInt_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0, intgo _swig_go_1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->SetAllInt(arg2);

}


ImGuiStorage *_wrap_new_ImGuiStorage_imgui_4778b1b319b813b6() {
  ImGuiStorage *result = 0 ;
  ImGuiStorage *_swig_go_result;


  result = (ImGuiStorage *)new ImGuiStorage();
  *(ImGuiStorage **)&_swig_go_result = (ImGuiStorage *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiStorage_imgui_4778b1b319b813b6(ImGuiStorage *_swig_go_0) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;

  arg1 = *(ImGuiStorage **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiTextEditCallbackData_EventFlag_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (ImGuiInputTextFlags)_swig_go_1;

  if (arg1) (arg1)->EventFlag = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_EventFlag_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (ImGuiInputTextFlags) ((arg1)->EventFlag);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_Flags_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (ImGuiInputTextFlags)_swig_go_1;

  if (arg1) (arg1)->Flags = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_Flags_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (ImGuiInputTextFlags) ((arg1)->Flags);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_UserData_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, void *_swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserData = arg2;

}


void *_wrap_ImGuiTextEditCallbackData_UserData_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (void *) ((arg1)->UserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_ReadOnly_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, bool _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->ReadOnly = arg2;

}


bool _wrap_ImGuiTextEditCallbackData_ReadOnly_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (bool) ((arg1)->ReadOnly);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_EventChar_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, short _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  if (arg1) (arg1)->EventChar = arg2;

}


short _wrap_ImGuiTextEditCallbackData_EventChar_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImWchar result;
  short _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (ImWchar) ((arg1)->EventChar);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_EventKey_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImGuiKey arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (ImGuiKey)_swig_go_1;

  if (arg1) (arg1)->EventKey = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_EventKey_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  ImGuiKey result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (ImGuiKey) ((arg1)->EventKey);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_Buf_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, _gostring_ _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    delete [] arg1->Buf;
    if (arg2) {
      arg1->Buf = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Buf, (const char *)arg2);
    } else {
      arg1->Buf = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_ImGuiTextEditCallbackData_Buf_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (char *) ((arg1)->Buf);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_BufTextLen_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->BufTextLen = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_BufTextLen_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->BufTextLen);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_BufSize_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->BufSize = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_BufSize_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->BufSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_BufDirty_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, bool _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  bool arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->BufDirty = arg2;

}


bool _wrap_ImGuiTextEditCallbackData_BufDirty_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (bool) ((arg1)->BufDirty);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_CursorPos_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->CursorPos = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_CursorPos_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->CursorPos);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_SelectionStart_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->SelectionStart = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_SelectionStart_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->SelectionStart);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_SelectionEnd_set_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->SelectionEnd = arg2;

}


intgo _wrap_ImGuiTextEditCallbackData_SelectionEnd_get_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (int) ((arg1)->SelectionEnd);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiTextEditCallbackData_DeleteChars_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  (arg1)->DeleteChars(arg2,arg3);

}


void _wrap_ImGuiTextEditCallbackData_InsertChars__SWIG_0_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';


  (arg1)->InsertChars(arg2,(char const *)arg3,(char const *)arg4);

  free(arg3);
  free(arg4);
}


void _wrap_ImGuiTextEditCallbackData_InsertChars__SWIG_1_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  (arg1)->InsertChars(arg2,(char const *)arg3);

  free(arg3);
}


bool _wrap_ImGuiTextEditCallbackData_HasSelection_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  result = (bool)((ImGuiTextEditCallbackData const *)arg1)->HasSelection();
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiTextEditCallbackData *_wrap_new_ImGuiTextEditCallbackData_imgui_4778b1b319b813b6() {
  ImGuiTextEditCallbackData *result = 0 ;
  ImGuiTextEditCallbackData *_swig_go_result;


  result = (ImGuiTextEditCallbackData *)new ImGuiTextEditCallbackData();
  *(ImGuiTextEditCallbackData **)&_swig_go_result = (ImGuiTextEditCallbackData *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiTextEditCallbackData_imgui_4778b1b319b813b6(ImGuiTextEditCallbackData *_swig_go_0) {
  ImGuiTextEditCallbackData *arg1 = (ImGuiTextEditCallbackData *) 0 ;

  arg1 = *(ImGuiTextEditCallbackData **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiSizeConstraintCallbackData_UserData_set_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0, void *_swig_go_1) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserData = arg2;

}


void *_wrap_ImGuiSizeConstraintCallbackData_UserData_get_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;

  result = (void *) ((arg1)->UserData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImGuiSizeConstraintCallbackData_Pos_set_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->Pos = *arg2;

}


ImVec2 *_wrap_ImGuiSizeConstraintCallbackData_Pos_get_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->Pos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiSizeConstraintCallbackData_CurrentSize_set_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->CurrentSize = *arg2;

}


ImVec2 *_wrap_ImGuiSizeConstraintCallbackData_CurrentSize_get_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->CurrentSize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImGuiSizeConstraintCallbackData_DesiredSize_set_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DesiredSize = *arg2;

}


ImVec2 *_wrap_ImGuiSizeConstraintCallbackData_DesiredSize_get_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DesiredSize);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


ImGuiSizeConstraintCallbackData *_wrap_new_ImGuiSizeConstraintCallbackData_imgui_4778b1b319b813b6() {
  ImGuiSizeConstraintCallbackData *result = 0 ;
  ImGuiSizeConstraintCallbackData *_swig_go_result;


  result = (ImGuiSizeConstraintCallbackData *)new ImGuiSizeConstraintCallbackData();
  *(ImGuiSizeConstraintCallbackData **)&_swig_go_result = (ImGuiSizeConstraintCallbackData *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiSizeConstraintCallbackData_imgui_4778b1b319b813b6(ImGuiSizeConstraintCallbackData *_swig_go_0) {
  ImGuiSizeConstraintCallbackData *arg1 = (ImGuiSizeConstraintCallbackData *) 0 ;

  arg1 = *(ImGuiSizeConstraintCallbackData **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImColor_Value_set_imgui_4778b1b319b813b6(ImColor *_swig_go_0, ImVec4 *_swig_go_1) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;

  arg1 = *(ImColor **)&_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  if (arg1) (arg1)->Value = *arg2;

}


ImVec4 *_wrap_ImColor_Value_get_imgui_4778b1b319b813b6(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = *(ImColor **)&_swig_go_0;

  result = (ImVec4 *)& ((arg1)->Value);
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_0_imgui_4778b1b319b813b6() {
  ImColor *result = 0 ;
  ImColor *_swig_go_result;


  result = (ImColor *)new ImColor();
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_2_imgui_4778b1b319b813b6(intgo _swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_3_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  ImU32 arg1 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (ImU32)_swig_go_0;

  result = (ImColor *)new ImColor(arg1);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_4_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_5_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


ImColor *_wrap_new_ImColor__SWIG_6_imgui_4778b1b319b813b6(ImVec4 *_swig_go_0) {
  ImVec4 *arg1 = 0 ;
  ImColor *result = 0 ;
  ImColor *_swig_go_result;

  arg1 = *(ImVec4 **)&_swig_go_0;

  result = (ImColor *)new ImColor((ImVec4 const &)*arg1);
  *(ImColor **)&_swig_go_result = (ImColor *)result;
  return _swig_go_result;
}


intgo _wrap_ImColor_ImU32_imgui_4778b1b319b813b6(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImColor **)&_swig_go_0;

  result = (ImU32)((ImColor const *)arg1)->operator ImU32();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec4 *_wrap_ImColor_ImVec4_imgui_4778b1b319b813b6(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 result;
  ImVec4 *_swig_go_result;

  arg1 = *(ImColor **)&_swig_go_0;

  result = ((ImColor const *)arg1)->operator ImVec4();
  *(ImVec4 **)&_swig_go_result = new ImVec4(result);
  return _swig_go_result;
}


void _wrap_ImColor_SetHSV__SWIG_0_imgui_4778b1b319b813b6(ImColor *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;

  arg1 = *(ImColor **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->SetHSV(arg2,arg3,arg4,arg5);

}


void _wrap_ImColor_SetHSV__SWIG_1_imgui_4778b1b319b813b6(ImColor *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;

  arg1 = *(ImColor **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  (arg1)->SetHSV(arg2,arg3,arg4);

}


ImColor *_wrap_ImColor_HSV__SWIG_0_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor result;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = ImColor::HSV(arg1,arg2,arg3,arg4);
  *(ImColor **)&_swig_go_result = new ImColor(result);
  return _swig_go_result;
}


ImColor *_wrap_ImColor_HSV__SWIG_1_imgui_4778b1b319b813b6(float _swig_go_0, float _swig_go_1, float _swig_go_2) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor result;
  ImColor *_swig_go_result;

  arg1 = (float)_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;

  result = ImColor::HSV(arg1,arg2,arg3);
  *(ImColor **)&_swig_go_result = new ImColor(result);
  return _swig_go_result;
}


void _wrap_delete_ImColor_imgui_4778b1b319b813b6(ImColor *_swig_go_0) {
  ImColor *arg1 = (ImColor *) 0 ;

  arg1 = *(ImColor **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImGuiListClipper_StartPosY_set_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, float _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->StartPosY = arg2;

}


float _wrap_ImGuiListClipper_StartPosY_get_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (float) ((arg1)->StartPosY);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiListClipper_ItemsHeight_set_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, float _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->ItemsHeight = arg2;

}


float _wrap_ImGuiListClipper_ItemsHeight_get_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (float) ((arg1)->ItemsHeight);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiListClipper_ItemsCount_set_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->ItemsCount = arg2;

}


intgo _wrap_ImGuiListClipper_ItemsCount_get_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->ItemsCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiListClipper_StepNo_set_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->StepNo = arg2;

}


intgo _wrap_ImGuiListClipper_StepNo_get_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->StepNo);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiListClipper_DisplayStart_set_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->DisplayStart = arg2;

}


intgo _wrap_ImGuiListClipper_DisplayStart_get_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->DisplayStart);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiListClipper_DisplayEnd_set_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->DisplayEnd = arg2;

}


intgo _wrap_ImGuiListClipper_DisplayEnd_get_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (int) ((arg1)->DisplayEnd);
  _swig_go_result = result;
  return _swig_go_result;
}


ImGuiListClipper *_wrap_new_ImGuiListClipper__SWIG_0_imgui_4778b1b319b813b6(intgo _swig_go_0, float _swig_go_1) {
  int arg1 ;
  float arg2 ;
  ImGuiListClipper *result = 0 ;
  ImGuiListClipper *_swig_go_result;

  arg1 = (int)_swig_go_0;
  arg2 = (float)_swig_go_1;

  result = (ImGuiListClipper *)new ImGuiListClipper(arg1,arg2);
  *(ImGuiListClipper **)&_swig_go_result = (ImGuiListClipper *)result;
  return _swig_go_result;
}


ImGuiListClipper *_wrap_new_ImGuiListClipper__SWIG_1_imgui_4778b1b319b813b6(intgo _swig_go_0) {
  int arg1 ;
  ImGuiListClipper *result = 0 ;
  ImGuiListClipper *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (ImGuiListClipper *)new ImGuiListClipper(arg1);
  *(ImGuiListClipper **)&_swig_go_result = (ImGuiListClipper *)result;
  return _swig_go_result;
}


ImGuiListClipper *_wrap_new_ImGuiListClipper__SWIG_2_imgui_4778b1b319b813b6() {
  ImGuiListClipper *result = 0 ;
  ImGuiListClipper *_swig_go_result;


  result = (ImGuiListClipper *)new ImGuiListClipper();
  *(ImGuiListClipper **)&_swig_go_result = (ImGuiListClipper *)result;
  return _swig_go_result;
}


void _wrap_delete_ImGuiListClipper_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  delete arg1;

}


bool _wrap_ImGuiListClipper_Step_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  result = (bool)(arg1)->Step();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImGuiListClipper_Begin__SWIG_0_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, intgo _swig_go_1, float _swig_go_2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  float arg3 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (float)_swig_go_2;

  (arg1)->Begin(arg2,arg3);

}


void _wrap_ImGuiListClipper_Begin__SWIG_1_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0, intgo _swig_go_1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->Begin(arg2);

}


void _wrap_ImGuiListClipper_End_imgui_4778b1b319b813b6(ImGuiListClipper *_swig_go_0) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;

  arg1 = *(ImGuiListClipper **)&_swig_go_0;

  (arg1)->End();

}


void _wrap_ImDrawCmd_ElemCount_set_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0, intgo _swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;

  if (arg1) (arg1)->ElemCount = arg2;

}


intgo _wrap_ImDrawCmd_ElemCount_get_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (unsigned int) ((arg1)->ElemCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawCmd_ClipRect_set_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0, ImVec4 *_swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(ImVec4 **)&_swig_go_1;

  if (arg1) (arg1)->ClipRect = *arg2;

}


ImVec4 *_wrap_ImDrawCmd_ClipRect_get_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *result = 0 ;
  ImVec4 *_swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (ImVec4 *)& ((arg1)->ClipRect);
  *(ImVec4 **)&_swig_go_result = (ImVec4 *)result;
  return _swig_go_result;
}


void _wrap_ImDrawCmd_TextureId_set_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0, ImTextureID _swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  if (arg1) (arg1)->TextureId = arg2;

}


ImTextureID _wrap_ImDrawCmd_TextureId_get_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID result;
  ImTextureID _swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (ImTextureID) ((arg1)->TextureId);
  *(ImTextureID *)&_swig_go_result = (ImTextureID)result;
  return _swig_go_result;
}


void _wrap_ImDrawCmd_UserCallback_set_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0, void** _swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(ImDrawCallback *)&_swig_go_1;

  if (arg1) (arg1)->UserCallback = arg2;

}


void** _wrap_ImDrawCmd_UserCallback_get_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback result;
  void** _swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (ImDrawCallback) ((arg1)->UserCallback);
  *(ImDrawCallback *)&_swig_go_result = (ImDrawCallback)result;
  return _swig_go_result;
}


void _wrap_ImDrawCmd_UserCallbackData_set_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0, void *_swig_go_1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->UserCallbackData = arg2;

}


void *_wrap_ImDrawCmd_UserCallbackData_get_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  result = (void *) ((arg1)->UserCallbackData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


ImDrawCmd *_wrap_new_ImDrawCmd_imgui_4778b1b319b813b6() {
  ImDrawCmd *result = 0 ;
  ImDrawCmd *_swig_go_result;


  result = (ImDrawCmd *)new ImDrawCmd();
  *(ImDrawCmd **)&_swig_go_result = (ImDrawCmd *)result;
  return _swig_go_result;
}


void _wrap_delete_ImDrawCmd_imgui_4778b1b319b813b6(ImDrawCmd *_swig_go_0) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;

  arg1 = *(ImDrawCmd **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImDrawVert_pos_set_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->pos = *arg2;

}


ImVec2 *_wrap_ImDrawVert_pos_get_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->pos);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImDrawVert_uv_set_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->uv = *arg2;

}


ImVec2 *_wrap_ImDrawVert_uv_get_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->uv);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImDrawVert_col_set_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0, intgo _swig_go_1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 arg2 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;

  if (arg1) (arg1)->col = arg2;

}


intgo _wrap_ImDrawVert_col_get_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 result;
  intgo _swig_go_result;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  result = (ImU32) ((arg1)->col);
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawVert *_wrap_new_ImDrawVert_imgui_4778b1b319b813b6() {
  ImDrawVert *result = 0 ;
  ImDrawVert *_swig_go_result;


  result = (ImDrawVert *)new ImDrawVert();
  *(ImDrawVert **)&_swig_go_result = (ImDrawVert *)result;
  return _swig_go_result;
}


void _wrap_delete_ImDrawVert_imgui_4778b1b319b813b6(ImDrawVert *_swig_go_0) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;

  arg1 = *(ImDrawVert **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImDrawChannel_CmdBuffer_set_imgui_4778b1b319b813b6(ImDrawChannel *_swig_go_0, ImVector< ImDrawCmd > *_swig_go_1) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;

  arg1 = *(ImDrawChannel **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawCmd > **)&_swig_go_1;

  if (arg1) (arg1)->CmdBuffer = *arg2;

}


ImVector< ImDrawCmd > *_wrap_ImDrawChannel_CmdBuffer_get_imgui_4778b1b319b813b6(ImDrawChannel *_swig_go_0) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  ImVector< ImDrawCmd > *_swig_go_result;

  arg1 = *(ImDrawChannel **)&_swig_go_0;

  result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
  *(ImVector< ImDrawCmd > **)&_swig_go_result = (ImVector< ImDrawCmd > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawChannel_IdxBuffer_set_imgui_4778b1b319b813b6(ImDrawChannel *_swig_go_0, ImVector< unsigned short > *_swig_go_1) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;

  arg1 = *(ImDrawChannel **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawIdx > **)&_swig_go_1;

  if (arg1) (arg1)->IdxBuffer = *arg2;

}


ImVector< unsigned short > *_wrap_ImDrawChannel_IdxBuffer_get_imgui_4778b1b319b813b6(ImDrawChannel *_swig_go_0) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  ImVector< unsigned short > *_swig_go_result;

  arg1 = *(ImDrawChannel **)&_swig_go_0;

  result = (ImVector< ImDrawIdx > *)& ((arg1)->IdxBuffer);
  *(ImVector< ImDrawIdx > **)&_swig_go_result = (ImVector< ImDrawIdx > *)result;
  return _swig_go_result;
}


ImDrawChannel *_wrap_new_ImDrawChannel_imgui_4778b1b319b813b6() {
  ImDrawChannel *result = 0 ;
  ImDrawChannel *_swig_go_result;


  result = (ImDrawChannel *)new ImDrawChannel();
  *(ImDrawChannel **)&_swig_go_result = (ImDrawChannel *)result;
  return _swig_go_result;
}


void _wrap_delete_ImDrawChannel_imgui_4778b1b319b813b6(ImDrawChannel *_swig_go_0) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;

  arg1 = *(ImDrawChannel **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImDrawList_CmdBuffer_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< ImDrawCmd > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawCmd > **)&_swig_go_1;

  if (arg1) (arg1)->CmdBuffer = *arg2;

}


ImVector< ImDrawCmd > *_wrap_ImDrawList_CmdBuffer_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  ImVector< ImDrawCmd > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
  *(ImVector< ImDrawCmd > **)&_swig_go_result = (ImVector< ImDrawCmd > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList_IdxBuffer_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< unsigned short > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawIdx > **)&_swig_go_1;

  if (arg1) (arg1)->IdxBuffer = *arg2;

}


ImVector< unsigned short > *_wrap_ImDrawList_IdxBuffer_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  ImVector< unsigned short > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawIdx > *)& ((arg1)->IdxBuffer);
  *(ImVector< ImDrawIdx > **)&_swig_go_result = (ImVector< ImDrawIdx > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList_VtxBuffer_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< ImDrawVert > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *arg2 = (ImVector< ImDrawVert > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawVert > **)&_swig_go_1;

  if (arg1) (arg1)->VtxBuffer = *arg2;

}


ImVector< ImDrawVert > *_wrap_ImDrawList_VtxBuffer_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *result = 0 ;
  ImVector< ImDrawVert > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawVert > *)& ((arg1)->VtxBuffer);
  *(ImVector< ImDrawVert > **)&_swig_go_result = (ImVector< ImDrawVert > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList__OwnerName_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, _gostring_ _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_OwnerName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_OwnerName, (const char *)arg2);
    } else {
      arg1->_OwnerName = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_ImDrawList__OwnerName_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (char *) ((arg1)->_OwnerName);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImDrawList__VtxCurrentIdx_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;

  if (arg1) (arg1)->_VtxCurrentIdx = arg2;

}


intgo _wrap_ImDrawList__VtxCurrentIdx_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (unsigned int) ((arg1)->_VtxCurrentIdx);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawList__VtxWritePtr_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImDrawVert *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *arg2 = (ImDrawVert *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawVert **)&_swig_go_1;

  if (arg1) (arg1)->_VtxWritePtr = arg2;

}


ImDrawVert *_wrap_ImDrawList__VtxWritePtr_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *result = 0 ;
  ImDrawVert *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawVert *) ((arg1)->_VtxWritePtr);
  *(ImDrawVert **)&_swig_go_result = (ImDrawVert *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList__IdxWritePtr_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, short *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *arg2 = (ImDrawIdx *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawIdx **)&_swig_go_1;

  if (arg1) (arg1)->_IdxWritePtr = arg2;

}


short *_wrap_ImDrawList__IdxWritePtr_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImDrawIdx *) ((arg1)->_IdxWritePtr);
  *(ImDrawIdx **)&_swig_go_result = (ImDrawIdx *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList__ClipRectStack_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< ImVec4 > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *arg2 = (ImVector< ImVec4 > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImVec4 > **)&_swig_go_1;

  if (arg1) (arg1)->_ClipRectStack = *arg2;

}


ImVector< ImVec4 > *_wrap_ImDrawList__ClipRectStack_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *result = 0 ;
  ImVector< ImVec4 > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImVec4 > *)& ((arg1)->_ClipRectStack);
  *(ImVector< ImVec4 > **)&_swig_go_result = (ImVector< ImVec4 > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList__TextureIdStack_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< void * > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *arg2 = (ImVector< ImTextureID > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImTextureID > **)&_swig_go_1;

  if (arg1) (arg1)->_TextureIdStack = *arg2;

}


ImVector< void * > *_wrap_ImDrawList__TextureIdStack_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *result = 0 ;
  ImVector< void * > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImTextureID > *)& ((arg1)->_TextureIdStack);
  *(ImVector< ImTextureID > **)&_swig_go_result = (ImVector< ImTextureID > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList__Path_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< ImVec2 > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *arg2 = (ImVector< ImVec2 > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImVec2 > **)&_swig_go_1;

  if (arg1) (arg1)->_Path = *arg2;

}


ImVector< ImVec2 > *_wrap_ImDrawList__Path_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *result = 0 ;
  ImVector< ImVec2 > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImVec2 > *)& ((arg1)->_Path);
  *(ImVector< ImVec2 > **)&_swig_go_result = (ImVector< ImVec2 > *)result;
  return _swig_go_result;
}


void _wrap_ImDrawList__ChannelsCurrent_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_ChannelsCurrent = arg2;

}


intgo _wrap_ImDrawList__ChannelsCurrent_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (int) ((arg1)->_ChannelsCurrent);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawList__ChannelsCount_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_ChannelsCount = arg2;

}


intgo _wrap_ImDrawList__ChannelsCount_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (int) ((arg1)->_ChannelsCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawList__Channels_set_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVector< ImDrawChannel > *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawChannel > *arg2 = (ImVector< ImDrawChannel > *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVector< ImDrawChannel > **)&_swig_go_1;

  if (arg1) (arg1)->_Channels = *arg2;

}


ImVector< ImDrawChannel > *_wrap_ImDrawList__Channels_get_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawChannel > *result = 0 ;
  ImVector< ImDrawChannel > *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = (ImVector< ImDrawChannel > *)& ((arg1)->_Channels);
  *(ImVector< ImDrawChannel > **)&_swig_go_result = (ImVector< ImDrawChannel > *)result;
  return _swig_go_result;
}


ImDrawList *_wrap_new_ImDrawList_imgui_4778b1b319b813b6() {
  ImDrawList *result = 0 ;
  ImDrawList *_swig_go_result;


  result = (ImDrawList *)new ImDrawList();
  *(ImDrawList **)&_swig_go_result = (ImDrawList *)result;
  return _swig_go_result;
}


void _wrap_delete_ImDrawList_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImDrawList_PushClipRect__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, bool _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  bool arg4 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  argp2 = (ImVec2 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg2 = (ImVec2)*argp2;


  argp3 = (ImVec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg3 = (ImVec2)*argp3;

  arg4 = (bool)_swig_go_3;

  (arg1)->PushClipRect(arg2,arg3,arg4);

}


void _wrap_ImDrawList_PushClipRect__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 arg2 ;
  ImVec2 arg3 ;
  ImVec2 *argp2 ;
  ImVec2 *argp3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  argp2 = (ImVec2 *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg2 = (ImVec2)*argp2;


  argp3 = (ImVec2 *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg3 = (ImVec2)*argp3;


  (arg1)->PushClipRect(arg2,arg3);

}


void _wrap_ImDrawList_PushClipRectFullScreen_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PushClipRectFullScreen();

}


void _wrap_ImDrawList_PopClipRect_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PopClipRect();

}


void _wrap_ImDrawList_PushTextureID_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID *arg2 = 0 ;
  ImTextureID temp2 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  temp2 = *(ImTextureID *)&_swig_go_1;
  arg2 = (ImTextureID *)&temp2;


  (arg1)->PushTextureID((ImTextureID const &)*arg2);

}


void _wrap_ImDrawList_PopTextureID_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PopTextureID();

}


ImVec2 *_wrap_ImDrawList_GetClipRectMin_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = ((ImDrawList const *)arg1)->GetClipRectMin();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


ImVec2 *_wrap_ImDrawList_GetClipRectMax_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImDrawList **)&_swig_go_0;

  result = ((ImDrawList const *)arg1)->GetClipRectMax();
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  return _swig_go_result;
}


void _wrap_ImDrawList_AddLine__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_ImDrawList_AddLine__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_AddRect__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4, intgo _swig_go_5, float _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  int arg6 ;
  float arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;
  arg7 = (float)_swig_go_6;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);

}


void _wrap_ImDrawList_AddRect__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  int arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);

}


void _wrap_ImDrawList_AddRect__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_ImDrawList_AddRect__SWIG_3_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_AddRectFilled__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  int arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;

  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);

}


void _wrap_ImDrawList_AddRectFilled__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_ImDrawList_AddRectFilled__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_AddRectFilledMultiColor_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3, intgo _swig_go_4, intgo _swig_go_5, intgo _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (ImU32)_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (ImU32)_swig_go_6;

  (arg1)->AddRectFilledMultiColor((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);

}


void _wrap_ImDrawList_AddQuad__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5, float _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (float)_swig_go_6;

  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);

}


void _wrap_ImDrawList_AddQuad__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;

  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);

}


void _wrap_ImDrawList_AddQuadFilled_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;

  (arg1)->AddQuadFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);

}


void _wrap_ImDrawList_AddTriangle__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, float _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  float arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;
  arg6 = (float)_swig_go_5;

  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6);

}


void _wrap_ImDrawList_AddTriangle__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);

}


void _wrap_ImDrawList_AddTriangleFilled_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  (arg1)->AddTriangleFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);

}


void _wrap_ImDrawList_AddCircle__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4, float _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (int)_swig_go_4;
  arg6 = (float)_swig_go_5;

  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);

}


void _wrap_ImDrawList_AddCircle__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_ImDrawList_AddCircle__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4);

}


void _wrap_ImDrawList_AddCircleFilled__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_ImDrawList_AddCircleFilled__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4);

}


void _wrap_ImDrawList_AddText__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImU32)_swig_go_2;

  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';


  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4,(char const *)arg5);

  free(arg4);
  free(arg5);
}


void _wrap_ImDrawList_AddText__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (ImU32)_swig_go_2;

  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';


  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4);

  free(arg4);
}


void _wrap_ImDrawList_AddText__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6, float _swig_go_7, ImVec4 *_swig_go_8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  ImVec4 *arg9 = (ImVec4 *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;
  arg9 = *(ImVec4 **)&_swig_go_8;

  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8,(ImVec4 const *)arg9);

  free(arg6);
  free(arg7);
}


void _wrap_ImDrawList_AddText__SWIG_3_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6, float _swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';

  arg8 = (float)_swig_go_7;

  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8);

  free(arg6);
  free(arg7);
}


void _wrap_ImDrawList_AddText__SWIG_4_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7);

  free(arg6);
  free(arg7);
}


void _wrap_ImDrawList_AddText__SWIG_5_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImFont *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, _gostring_ _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (ImU32)_swig_go_4;

  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6);

  free(arg6);
}


void _wrap_ImDrawList_AddImage__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, intgo _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = (ImU32)_swig_go_6;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7);

}


void _wrap_ImDrawList_AddImage__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);

}


void _wrap_ImDrawList_AddImage__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5);

}


void _wrap_ImDrawList_AddImage__SWIG_3_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);

}


void _wrap_ImDrawList_AddImageQuad__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8, ImVec2 *_swig_go_9, intgo _swig_go_10) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;
  ImU32 arg11 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;
  arg10 = *(ImVec2 **)&_swig_go_9;
  arg11 = (ImU32)_swig_go_10;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10,arg11);

}


void _wrap_ImDrawList_AddImageQuad__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8, ImVec2 *_swig_go_9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;
  arg10 = *(ImVec2 **)&_swig_go_9;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10);

}


void _wrap_ImDrawList_AddImageQuad__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9);

}


void _wrap_ImDrawList_AddImageQuad__SWIG_3_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8);

}


void _wrap_ImDrawList_AddImageQuad__SWIG_4_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7);

}


void _wrap_ImDrawList_AddImageQuad__SWIG_5_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImTextureID _swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;

  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);

}


void _wrap_ImDrawList_AddPolyline_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4, float _swig_go_5, bool _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  bool arg5 ;
  float arg6 ;
  bool arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (bool)_swig_go_4;
  arg6 = (float)_swig_go_5;
  arg7 = (bool)_swig_go_6;

  (arg1)->AddPolyline((ImVec2 const *)arg2,arg3,arg4,arg5,arg6,arg7);

}


void _wrap_ImDrawList_AddConvexPolyFilled_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, intgo _swig_go_2, intgo _swig_go_3, bool _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  bool arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (ImU32)_swig_go_3;
  arg5 = (bool)_swig_go_4;

  (arg1)->AddConvexPolyFilled((ImVec2 const *)arg2,arg3,arg4,arg5);

}


void _wrap_ImDrawList_AddBezierCurve__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5, float _swig_go_6, intgo _swig_go_7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  int arg8 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (float)_swig_go_6;
  arg8 = (int)_swig_go_7;

  (arg1)->AddBezierCurve((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);

}


void _wrap_ImDrawList_AddBezierCurve__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5, float _swig_go_6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;
  arg7 = (float)_swig_go_6;

  (arg1)->AddBezierCurve((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);

}


void _wrap_ImDrawList_PathClear_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->PathClear();

}


void _wrap_ImDrawList_PathLineTo_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  (arg1)->PathLineTo((ImVec2 const &)*arg2);

}


void _wrap_ImDrawList_PathLineToMergeDuplicate_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  (arg1)->PathLineToMergeDuplicate((ImVec2 const &)*arg2);

}


void _wrap_ImDrawList_PathFillConvex_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;

  (arg1)->PathFillConvex(arg2);

}


void _wrap_ImDrawList_PathStroke__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1, bool _swig_go_2, float _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;
  float arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;
  arg3 = (bool)_swig_go_2;
  arg4 = (float)_swig_go_3;

  (arg1)->PathStroke(arg2,arg3,arg4);

}


void _wrap_ImDrawList_PathStroke__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1, bool _swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  bool arg3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImU32)_swig_go_1;
  arg3 = (bool)_swig_go_2;

  (arg1)->PathStroke(arg2,arg3);

}


void _wrap_ImDrawList_PathArcTo__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;
  arg6 = (int)_swig_go_5;

  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);

}


void _wrap_ImDrawList_PathArcTo__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, float _swig_go_3, float _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (float)_swig_go_4;

  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_ImDrawList_PathArcToFast_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, float _swig_go_2, intgo _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (int)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->PathArcToFast((ImVec2 const &)*arg2,arg3,arg4,arg5);

}


void _wrap_ImDrawList_PathBezierCurveTo__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->PathBezierCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);

}


void _wrap_ImDrawList_PathBezierCurveTo__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  (arg1)->PathBezierCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);

}


void _wrap_ImDrawList_PathRect__SWIG_0_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, float _swig_go_3, intgo _swig_go_4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  int arg5 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = (int)_swig_go_4;

  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);

}


void _wrap_ImDrawList_PathRect__SWIG_1_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, float _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (float)_swig_go_3;

  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_PathRect__SWIG_2_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;

  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3);

}


void _wrap_ImDrawList_ChannelsSplit_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->ChannelsSplit(arg2);

}


void _wrap_ImDrawList_ChannelsMerge_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->ChannelsMerge();

}


void _wrap_ImDrawList_ChannelsSetCurrent_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->ChannelsSetCurrent(arg2);

}


void _wrap_ImDrawList_AddCallback_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, void** _swig_go_1, void *_swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  void *arg3 = (void *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImDrawCallback *)&_swig_go_1;
  arg3 = *(void **)&_swig_go_2;

  (arg1)->AddCallback(arg2,arg3);

}


void _wrap_ImDrawList_AddDrawCmd_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->AddDrawCmd();

}


void _wrap_ImDrawList_Clear_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->Clear();

}


void _wrap_ImDrawList_ClearFreeMemory_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->ClearFreeMemory();

}


void _wrap_ImDrawList_PrimReserve_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (int)_swig_go_1;
  arg3 = (int)_swig_go_2;

  (arg1)->PrimReserve(arg2,arg3);

}


void _wrap_ImDrawList_PrimRect_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->PrimRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_PrimRectUV_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, intgo _swig_go_5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = (ImU32)_swig_go_5;

  (arg1)->PrimRectUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);

}


void _wrap_ImDrawList_PrimQuadUV_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3, ImVec2 *_swig_go_4, ImVec2 *_swig_go_5, ImVec2 *_swig_go_6, ImVec2 *_swig_go_7, ImVec2 *_swig_go_8, intgo _swig_go_9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImU32 arg10 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;
  arg5 = *(ImVec2 **)&_swig_go_4;
  arg6 = *(ImVec2 **)&_swig_go_5;
  arg7 = *(ImVec2 **)&_swig_go_6;
  arg8 = *(ImVec2 **)&_swig_go_7;
  arg9 = *(ImVec2 **)&_swig_go_8;
  arg10 = (ImU32)_swig_go_9;

  (arg1)->PrimQuadUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,arg10);

}


void _wrap_ImDrawList_PrimWriteVtx_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->PrimWriteVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_PrimWriteIdx_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, short _swig_go_1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx arg2 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = (ImDrawIdx)_swig_go_1;

  (arg1)->PrimWriteIdx(arg2);

}


void _wrap_ImDrawList_PrimVtx_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0, ImVec2 *_swig_go_1, ImVec2 *_swig_go_2, intgo _swig_go_3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;

  arg1 = *(ImDrawList **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = (ImU32)_swig_go_3;

  (arg1)->PrimVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);

}


void _wrap_ImDrawList_UpdateClipRect_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->UpdateClipRect();

}


void _wrap_ImDrawList_UpdateTextureID_imgui_4778b1b319b813b6(ImDrawList *_swig_go_0) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;

  arg1 = *(ImDrawList **)&_swig_go_0;

  (arg1)->UpdateTextureID();

}


void _wrap_ImDrawData_Valid_set_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0, bool _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->Valid = arg2;

}


bool _wrap_ImDrawData_Valid_get_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (bool) ((arg1)->Valid);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawData_CmdLists_set_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0, ImDrawList **_swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **arg2 = (ImDrawList **) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = *(ImDrawList ***)&_swig_go_1;

  if (arg1) (arg1)->CmdLists = arg2;

}


ImDrawList **_wrap_ImDrawData_CmdLists_get_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList **result = 0 ;
  ImDrawList **_swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (ImDrawList **) ((arg1)->CmdLists);
  *(ImDrawList ***)&_swig_go_result = (ImDrawList **)result;
  return _swig_go_result;
}


void _wrap_ImDrawData_CmdListsCount_set_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0, intgo _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->CmdListsCount = arg2;

}


intgo _wrap_ImDrawData_CmdListsCount_get_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (int) ((arg1)->CmdListsCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawData_TotalVtxCount_set_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0, intgo _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TotalVtxCount = arg2;

}


intgo _wrap_ImDrawData_TotalVtxCount_get_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (int) ((arg1)->TotalVtxCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImDrawData_TotalIdxCount_set_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0, intgo _swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TotalIdxCount = arg2;

}


intgo _wrap_ImDrawData_TotalIdxCount_get_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImDrawData **)&_swig_go_0;

  result = (int) ((arg1)->TotalIdxCount);
  _swig_go_result = result;
  return _swig_go_result;
}


ImDrawData *_wrap_new_ImDrawData_imgui_4778b1b319b813b6() {
  ImDrawData *result = 0 ;
  ImDrawData *_swig_go_result;


  result = (ImDrawData *)new ImDrawData();
  *(ImDrawData **)&_swig_go_result = (ImDrawData *)result;
  return _swig_go_result;
}


void _wrap_ImDrawData_DeIndexAllBuffers_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;

  (arg1)->DeIndexAllBuffers();

}


void _wrap_ImDrawData_ScaleClipRects_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0, ImVec2 *_swig_go_1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  (arg1)->ScaleClipRects((ImVec2 const &)*arg2);

}


void _wrap_delete_ImDrawData_imgui_4778b1b319b813b6(ImDrawData *_swig_go_0) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;

  arg1 = *(ImDrawData **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImFontConfig_FontData_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, void *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *arg2 = (void *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;

  if (arg1) (arg1)->FontData = arg2;

}


void *_wrap_ImFontConfig_FontData_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (void *) ((arg1)->FontData);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_FontDataSize_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->FontDataSize = arg2;

}


intgo _wrap_ImFontConfig_FontDataSize_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->FontDataSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_FontDataOwnedByAtlas_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, bool _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->FontDataOwnedByAtlas = arg2;

}


bool _wrap_ImFontConfig_FontDataOwnedByAtlas_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (bool) ((arg1)->FontDataOwnedByAtlas);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_FontNo_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->FontNo = arg2;

}


intgo _wrap_ImFontConfig_FontNo_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->FontNo);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_SizePixels_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, float _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->SizePixels = arg2;

}


float _wrap_ImFontConfig_SizePixels_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (float) ((arg1)->SizePixels);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_OversampleH_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->OversampleH = arg2;

}


intgo _wrap_ImFontConfig_OversampleH_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->OversampleH);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_OversampleV_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, intgo _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->OversampleV = arg2;

}


intgo _wrap_ImFontConfig_OversampleV_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (int) ((arg1)->OversampleV);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_PixelSnapH_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, bool _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->PixelSnapH = arg2;

}


bool _wrap_ImFontConfig_PixelSnapH_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (bool) ((arg1)->PixelSnapH);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_GlyphExtraSpacing_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, ImVec2 *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->GlyphExtraSpacing = *arg2;

}


ImVec2 *_wrap_ImFontConfig_GlyphExtraSpacing_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->GlyphExtraSpacing);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_GlyphOffset_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, ImVec2 *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->GlyphOffset = *arg2;

}


ImVec2 *_wrap_ImFontConfig_GlyphOffset_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_GlyphRanges_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, short *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImWchar **)&_swig_go_1;

  if (arg1) (arg1)->GlyphRanges = (ImWchar const *)arg2;

}


short *_wrap_ImFontConfig_GlyphRanges_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImWchar *) ((arg1)->GlyphRanges);
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_MergeMode_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, bool _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->MergeMode = arg2;

}


bool _wrap_ImFontConfig_MergeMode_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (bool) ((arg1)->MergeMode);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontConfig_Name_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, _gostring_ _swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *arg2 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 32-1);
      arg1->Name[32-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_ImFontConfig_Name_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (char *)(char *) ((arg1)->Name);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_ImFontConfig_DstFont_set_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0, ImFont *_swig_go_1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;
  arg2 = *(ImFont **)&_swig_go_1;

  if (arg1) (arg1)->DstFont = arg2;

}


ImFont *_wrap_ImFontConfig_DstFont_get_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  result = (ImFont *) ((arg1)->DstFont);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFontConfig *_wrap_new_ImFontConfig_imgui_4778b1b319b813b6() {
  ImFontConfig *result = 0 ;
  ImFontConfig *_swig_go_result;


  result = (ImFontConfig *)new ImFontConfig();
  *(ImFontConfig **)&_swig_go_result = (ImFontConfig *)result;
  return _swig_go_result;
}


void _wrap_delete_ImFontConfig_imgui_4778b1b319b813b6(ImFontConfig *_swig_go_0) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;

  arg1 = *(ImFontConfig **)&_swig_go_0;

  delete arg1;

}


ImFontAtlas *_wrap_new_ImFontAtlas_imgui_4778b1b319b813b6() {
  ImFontAtlas *result = 0 ;
  ImFontAtlas *_swig_go_result;


  result = (ImFontAtlas *)new ImFontAtlas();
  *(ImFontAtlas **)&_swig_go_result = (ImFontAtlas *)result;
  return _swig_go_result;
}


void _wrap_delete_ImFontAtlas_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  delete arg1;

}


ImFont *_wrap_ImFontAtlas_AddFont_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImFontConfig *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFontConfig **)&_swig_go_1;

  result = (ImFont *)(arg1)->AddFont((ImFontConfig const *)arg2);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontDefault__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImFontConfig *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFontConfig **)&_swig_go_1;

  result = (ImFont *)(arg1)->AddFontDefault((ImFontConfig const *)arg2);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontDefault__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImFont *)(arg1)->AddFontDefault();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3, short *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;
  arg5 = *(ImWchar **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromFileTTF__SWIG_2_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;

  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4, short *_swig_go_5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;
  arg6 = *(ImWchar **)&_swig_go_5;

  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryTTF__SWIG_2_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4, short *_swig_go_5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;
  arg6 = *(ImWchar **)&_swig_go_5;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3, ImFontConfig *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;
  arg5 = *(ImFontConfig **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_2_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, void *_swig_go_1, intgo _swig_go_2, float _swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(void **)&_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (float)_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3, short *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;
  arg5 = *(ImWchar **)&_swig_go_4;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2, ImFontConfig *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;
  arg4 = *(ImFontConfig **)&_swig_go_3;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


ImFont *_wrap_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_2_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, _gostring_ _swig_go_1, float _swig_go_2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  ImFont *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';

  arg3 = (float)_swig_go_2;

  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3);
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  free(arg2);
  return _swig_go_result;
}


void _wrap_ImFontAtlas_ClearTexData_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->ClearTexData();

}


void _wrap_ImFontAtlas_ClearInputData_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->ClearInputData();

}


void _wrap_ImFontAtlas_ClearFonts_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->ClearFonts();

}


void _wrap_ImFontAtlas_Clear_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  (arg1)->Clear();

}


void _wrap_ImFontAtlas_GetTexDataAsAlpha8__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3, intgo *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;
  arg5 = *(int **)&_swig_go_4;

  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4,arg5);

}


void _wrap_ImFontAtlas_GetTexDataAsAlpha8__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;

  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4);

}


void _wrap_ImFontAtlas_GetTexDataAsRGBA32__SWIG_0_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3, intgo *_swig_go_4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;
  arg5 = *(int **)&_swig_go_4;

  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4,arg5);

}


void _wrap_ImFontAtlas_GetTexDataAsRGBA32__SWIG_1_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, char **_swig_go_1, intgo *_swig_go_2, intgo *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char ***)&_swig_go_1;
  arg3 = *(int **)&_swig_go_2;
  arg4 = *(int **)&_swig_go_3;

  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4);

}


void _wrap_ImFontAtlas_SetTexID__imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImTextureID _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  (arg1)->SetTexID(arg2);

}


short *_wrap_ImFontAtlas_GetGlyphRangesDefault_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesDefault();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_ImFontAtlas_GetGlyphRangesKorean_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesKorean();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_ImFontAtlas_GetGlyphRangesJapanese_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesJapanese();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_ImFontAtlas_GetGlyphRangesChinese_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesChinese();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_ImFontAtlas_GetGlyphRangesCyrillic_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesCyrillic();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


short *_wrap_ImFontAtlas_GetGlyphRangesThai_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  short *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImWchar *)(arg1)->GetGlyphRangesThai();
  *(ImWchar **)&_swig_go_result = (ImWchar *)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexID_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImTextureID _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImTextureID *)&_swig_go_1;

  if (arg1) (arg1)->TexID = arg2;

}


ImTextureID _wrap_ImFontAtlas_TexID_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID result;
  ImTextureID _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImTextureID) ((arg1)->TexID);
  *(ImTextureID *)&_swig_go_result = (ImTextureID)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexPixelsAlpha8_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, char *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned char **)&_swig_go_1;

  if (arg1) (arg1)->TexPixelsAlpha8 = arg2;

}


char *_wrap_ImFontAtlas_TexPixelsAlpha8_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *result = 0 ;
  char *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (unsigned char *) ((arg1)->TexPixelsAlpha8);
  *(unsigned char **)&_swig_go_result = (unsigned char *)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexPixelsRGBA32_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, intgo *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(unsigned int **)&_swig_go_1;

  if (arg1) (arg1)->TexPixelsRGBA32 = arg2;

}


intgo *_wrap_ImFontAtlas_TexPixelsRGBA32_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *result = 0 ;
  intgo *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (unsigned int *) ((arg1)->TexPixelsRGBA32);
  *(unsigned int **)&_swig_go_result = (unsigned int *)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexWidth_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TexWidth = arg2;

}


intgo _wrap_ImFontAtlas_TexWidth_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (int) ((arg1)->TexWidth);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexHeight_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TexHeight = arg2;

}


intgo _wrap_ImFontAtlas_TexHeight_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (int) ((arg1)->TexHeight);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexDesiredWidth_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TexDesiredWidth = arg2;

}


intgo _wrap_ImFontAtlas_TexDesiredWidth_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (int) ((arg1)->TexDesiredWidth);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexGlyphPadding_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, intgo _swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->TexGlyphPadding = arg2;

}


intgo _wrap_ImFontAtlas_TexGlyphPadding_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (int) ((arg1)->TexGlyphPadding);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_TexUvWhitePixel_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImVec2 *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->TexUvWhitePixel = *arg2;

}


ImVec2 *_wrap_ImFontAtlas_TexUvWhitePixel_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->TexUvWhitePixel);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_Fonts_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImVector< ImFont * > *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFont * > *arg2 = (ImVector< ImFont * > *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImVector< ImFont * > **)&_swig_go_1;

  if (arg1) (arg1)->Fonts = *arg2;

}


ImVector< ImFont * > *_wrap_ImFontAtlas_Fonts_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFont * > *result = 0 ;
  ImVector< ImFont * > *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImVector< ImFont * > *)& ((arg1)->Fonts);
  *(ImVector< ImFont * > **)&_swig_go_result = (ImVector< ImFont * > *)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_CustomRects_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImVector< ImFontAtlas::CustomRect > *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontAtlas::CustomRect > *arg2 = (ImVector< ImFontAtlas::CustomRect > *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImVector< ImFontAtlas::CustomRect > **)&_swig_go_1;

  if (arg1) (arg1)->CustomRects = *arg2;

}


ImVector< ImFontAtlas::CustomRect > *_wrap_ImFontAtlas_CustomRects_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontAtlas::CustomRect > *result = 0 ;
  ImVector< ImFontAtlas::CustomRect > *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImVector< ImFontAtlas::CustomRect > *)& ((arg1)->CustomRects);
  *(ImVector< ImFontAtlas::CustomRect > **)&_swig_go_result = (ImVector< ImFontAtlas::CustomRect > *)result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_ConfigData_set_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImVector< ImFontConfig > *_swig_go_1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontConfig > *arg2 = (ImVector< ImFontConfig > *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImVector< ImFontConfig > **)&_swig_go_1;

  if (arg1) (arg1)->ConfigData = *arg2;

}


ImVector< ImFontConfig > *_wrap_ImFontAtlas_ConfigData_get_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontConfig > *result = 0 ;
  ImVector< ImFontConfig > *_swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (ImVector< ImFontConfig > *)& ((arg1)->ConfigData);
  *(ImVector< ImFontConfig > **)&_swig_go_result = (ImVector< ImFontConfig > *)result;
  return _swig_go_result;
}


bool _wrap_ImFontAtlas_Build_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;

  result = (bool)(arg1)->Build();
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_ImFontAtlas_CustomRectRegister_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, intgo _swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;
  arg3 = (int)_swig_go_2;
  arg4 = (int)_swig_go_3;

  result = (int)(arg1)->CustomRectRegister(arg2,arg3,arg4);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFontAtlas_CustomRectCalcUV_imgui_4778b1b319b813b6(ImFontAtlas *_swig_go_0, ImFontAtlas::CustomRect *_swig_go_1, ImVec2 *_swig_go_2, ImVec2 *_swig_go_3) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlas::CustomRect *arg2 = (ImFontAtlas::CustomRect *) 0 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;

  arg1 = *(ImFontAtlas **)&_swig_go_0;
  arg2 = *(ImFontAtlas::CustomRect **)&_swig_go_1;
  arg3 = *(ImVec2 **)&_swig_go_2;
  arg4 = *(ImVec2 **)&_swig_go_3;

  (arg1)->CustomRectCalcUV((ImFontAtlas::CustomRect const *)arg2,arg3,arg4);

}


void _wrap_ImFont_FontSize_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FontSize = arg2;

}


float _wrap_ImFont_FontSize_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (float) ((arg1)->FontSize);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_Scale_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Scale = arg2;

}


float _wrap_ImFont_Scale_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (float) ((arg1)->Scale);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_DisplayOffset_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImVec2 *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImVec2 **)&_swig_go_1;

  if (arg1) (arg1)->DisplayOffset = *arg2;

}


ImVec2 *_wrap_ImFont_DisplayOffset_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVec2 *result = 0 ;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImVec2 *)& ((arg1)->DisplayOffset);
  *(ImVec2 **)&_swig_go_result = (ImVec2 *)result;
  return _swig_go_result;
}


void _wrap_ImFont_Glyphs_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImVector< ImFont::Glyph > *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImFont::Glyph > *arg2 = (ImVector< ImFont::Glyph > *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImVector< ImFont::Glyph > **)&_swig_go_1;

  if (arg1) (arg1)->Glyphs = *arg2;

}


ImVector< ImFont::Glyph > *_wrap_ImFont_Glyphs_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImFont::Glyph > *result = 0 ;
  ImVector< ImFont::Glyph > *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImVector< ImFont::Glyph > *)& ((arg1)->Glyphs);
  *(ImVector< ImFont::Glyph > **)&_swig_go_result = (ImVector< ImFont::Glyph > *)result;
  return _swig_go_result;
}


void _wrap_ImFont_IndexXAdvance_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImVector< float > *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< float > *arg2 = (ImVector< float > *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImVector< float > **)&_swig_go_1;

  if (arg1) (arg1)->IndexXAdvance = *arg2;

}


ImVector< float > *_wrap_ImFont_IndexXAdvance_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< float > *result = 0 ;
  ImVector< float > *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImVector< float > *)& ((arg1)->IndexXAdvance);
  *(ImVector< float > **)&_swig_go_result = (ImVector< float > *)result;
  return _swig_go_result;
}


void _wrap_ImFont_IndexLookup_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImVector< unsigned short > *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< unsigned short > *arg2 = (ImVector< unsigned short > *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImVector< unsigned short > **)&_swig_go_1;

  if (arg1) (arg1)->IndexLookup = *arg2;

}


ImVector< unsigned short > *_wrap_ImFont_IndexLookup_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< unsigned short > *result = 0 ;
  ImVector< unsigned short > *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImVector< unsigned short > *)& ((arg1)->IndexLookup);
  *(ImVector< unsigned short > **)&_swig_go_result = (ImVector< unsigned short > *)result;
  return _swig_go_result;
}


void _wrap_ImFont_FallbackGlyph_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImFont::Glyph *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFont::Glyph *arg2 = (ImFont::Glyph *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImFont::Glyph **)&_swig_go_1;

  if (arg1) (arg1)->FallbackGlyph = (ImFont::Glyph const *)arg2;

}


ImFont::Glyph *_wrap_ImFont_FallbackGlyph_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFont::Glyph *result = 0 ;
  ImFont::Glyph *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImFont::Glyph *) ((arg1)->FallbackGlyph);
  *(ImFont::Glyph **)&_swig_go_result = (ImFont::Glyph *)result;
  return _swig_go_result;
}


void _wrap_ImFont_FallbackXAdvance_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->FallbackXAdvance = arg2;

}


float _wrap_ImFont_FallbackXAdvance_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (float) ((arg1)->FallbackXAdvance);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_FallbackChar_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  if (arg1) (arg1)->FallbackChar = arg2;

}


short _wrap_ImFont_FallbackChar_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  short _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImWchar) ((arg1)->FallbackChar);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_ConfigDataCount_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  short arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (short)_swig_go_1;

  if (arg1) (arg1)->ConfigDataCount = arg2;

}


short _wrap_ImFont_ConfigDataCount_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  short result;
  short _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (short) ((arg1)->ConfigDataCount);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_ConfigData_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImFontConfig *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImFontConfig **)&_swig_go_1;

  if (arg1) (arg1)->ConfigData = arg2;

}


ImFontConfig *_wrap_ImFont_ConfigData_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *result = 0 ;
  ImFontConfig *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImFontConfig *) ((arg1)->ConfigData);
  *(ImFontConfig **)&_swig_go_result = (ImFontConfig *)result;
  return _swig_go_result;
}


void _wrap_ImFont_ContainerAtlas_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImFontAtlas *_swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImFontAtlas **)&_swig_go_1;

  if (arg1) (arg1)->ContainerAtlas = arg2;

}


ImFontAtlas *_wrap_ImFont_ContainerAtlas_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *result = 0 ;
  ImFontAtlas *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (ImFontAtlas *) ((arg1)->ContainerAtlas);
  *(ImFontAtlas **)&_swig_go_result = (ImFontAtlas *)result;
  return _swig_go_result;
}


void _wrap_ImFont_Ascent_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Ascent = arg2;

}


float _wrap_ImFont_Ascent_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (float) ((arg1)->Ascent);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_Descent_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  if (arg1) (arg1)->Descent = arg2;

}


float _wrap_ImFont_Descent_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (float) ((arg1)->Descent);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_ImFont_MetricsTotalSurface_set_imgui_4778b1b319b813b6(ImFont *_swig_go_0, intgo _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->MetricsTotalSurface = arg2;

}


intgo _wrap_ImFont_MetricsTotalSurface_get_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (int) ((arg1)->MetricsTotalSurface);
  _swig_go_result = result;
  return _swig_go_result;
}


ImFont *_wrap_new_ImFont_imgui_4778b1b319b813b6() {
  ImFont *result = 0 ;
  ImFont *_swig_go_result;


  result = (ImFont *)new ImFont();
  *(ImFont **)&_swig_go_result = (ImFont *)result;
  return _swig_go_result;
}


void _wrap_delete_ImFont_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;

  delete arg1;

}


void _wrap_ImFont_Clear_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;

  (arg1)->Clear();

}


void _wrap_ImFont_BuildLookupTable_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;

  arg1 = *(ImFont **)&_swig_go_0;

  (arg1)->BuildLookupTable();

}


ImFont::Glyph *_wrap_ImFont_FindGlyph_imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFont::Glyph *result = 0 ;
  ImFont::Glyph *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  result = (ImFont::Glyph *)((ImFont const *)arg1)->FindGlyph(arg2);
  *(ImFont::Glyph **)&_swig_go_result = (ImFont::Glyph *)result;
  return _swig_go_result;
}


void _wrap_ImFont_SetFallbackChar__imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  (arg1)->SetFallbackChar(arg2);

}


float _wrap_ImFont_GetCharAdvance_imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  float result;
  float _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;

  result = (float)((ImFont const *)arg1)->GetCharAdvance(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_ImFont_IsLoaded_imgui_4778b1b319b813b6(ImFont *_swig_go_0) {
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;

  result = (bool)((ImFont const *)arg1)->IsLoaded();
  _swig_go_result = result;
  return _swig_go_result;
}


ImVec2 *_wrap_ImFont_CalcTextSizeA__SWIG_0_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5, _gostring_* _swig_go_6) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';

  arg7 = *(char ***)&_swig_go_6;

  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg5);
  free(arg6);
  return _swig_go_result;
}


ImVec2 *_wrap_ImFont_CalcTextSizeA__SWIG_1_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  arg6 = (char *)malloc(_swig_go_5.n + 1);
  memcpy(arg6, _swig_go_5.p, _swig_go_5.n);
  arg6[_swig_go_5.n] = '\0';


  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg5);
  free(arg6);
  return _swig_go_result;
}


ImVec2 *_wrap_ImFont_CalcTextSizeA__SWIG_2_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1, float _swig_go_2, float _swig_go_3, _gostring_ _swig_go_4) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImVec2 result;
  ImVec2 *_swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;
  arg3 = (float)_swig_go_2;
  arg4 = (float)_swig_go_3;

  arg5 = (char *)malloc(_swig_go_4.n + 1);
  memcpy(arg5, _swig_go_4.p, _swig_go_4.n);
  arg5[_swig_go_4.n] = '\0';


  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5);
  *(ImVec2 **)&_swig_go_result = new ImVec2(result);
  free(arg5);
  return _swig_go_result;
}


_gostring_ _wrap_ImFont_CalcWordWrapPositionA_imgui_4778b1b319b813b6(ImFont *_swig_go_0, float _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, float _swig_go_4) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  float arg5 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (float)_swig_go_1;

  arg3 = (char *)malloc(_swig_go_2.n + 1);
  memcpy(arg3, _swig_go_2.p, _swig_go_2.n);
  arg3[_swig_go_2.n] = '\0';


  arg4 = (char *)malloc(_swig_go_3.n + 1);
  memcpy(arg4, _swig_go_3.p, _swig_go_3.n);
  arg4[_swig_go_3.n] = '\0';

  arg5 = (float)_swig_go_4;

  result = (char *)((ImFont const *)arg1)->CalcWordWrapPositionA(arg2,(char const *)arg3,(char const *)arg4,arg5);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  free(arg3);
  free(arg4);
  return _swig_go_result;
}


void _wrap_ImFont_RenderChar_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, short _swig_go_5) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  unsigned short arg6 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = (unsigned short)_swig_go_5;

  ((ImFont const *)arg1)->RenderChar(arg2,arg3,arg4,arg5,arg6);

}


void _wrap_ImFont_RenderText__SWIG_0_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, float _swig_go_8, bool _swig_go_9) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  bool arg10 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;
  arg10 = (bool)_swig_go_9;

  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9,arg10);

  free(arg7);
  free(arg8);
}


void _wrap_ImFont_RenderText__SWIG_1_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7, float _swig_go_8) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  float arg9 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';

  arg9 = (float)_swig_go_8;

  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8,arg9);

  free(arg7);
  free(arg8);
}


void _wrap_ImFont_RenderText__SWIG_2_imgui_4778b1b319b813b6(ImFont *_swig_go_0, ImDrawList *_swig_go_1, float _swig_go_2, ImVec2 *_swig_go_3, intgo _swig_go_4, ImVec4 *_swig_go_5, _gostring_ _swig_go_6, _gostring_ _swig_go_7) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 arg4 ;
  ImU32 arg5 ;
  ImVec4 *arg6 = 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImVec2 *argp4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = *(ImDrawList **)&_swig_go_1;
  arg3 = (float)_swig_go_2;

  argp4 = (ImVec2 *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null ImVec2");
  }
  arg4 = (ImVec2)*argp4;

  arg5 = (ImU32)_swig_go_4;
  arg6 = *(ImVec4 **)&_swig_go_5;

  arg7 = (char *)malloc(_swig_go_6.n + 1);
  memcpy(arg7, _swig_go_6.p, _swig_go_6.n);
  arg7[_swig_go_6.n] = '\0';


  arg8 = (char *)malloc(_swig_go_7.n + 1);
  memcpy(arg8, _swig_go_7.p, _swig_go_7.n);
  arg8[_swig_go_7.n] = '\0';


  ((ImFont const *)arg1)->RenderText(arg2,arg3,arg4,arg5,(ImVec4 const &)*arg6,(char const *)arg7,(char const *)arg8);

  free(arg7);
  free(arg8);
}


void _wrap_ImFont_GrowIndex_imgui_4778b1b319b813b6(ImFont *_swig_go_0, intgo _swig_go_1) {
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  (arg1)->GrowIndex(arg2);

}


void _wrap_ImFont_AddRemapChar__SWIG_0_imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1, short _swig_go_2, bool _swig_go_3) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;
  bool arg4 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;
  arg3 = (ImWchar)_swig_go_2;
  arg4 = (bool)_swig_go_3;

  (arg1)->AddRemapChar(arg2,arg3,arg4);

}


void _wrap_ImFont_AddRemapChar__SWIG_1_imgui_4778b1b319b813b6(ImFont *_swig_go_0, short _swig_go_1, short _swig_go_2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;

  arg1 = *(ImFont **)&_swig_go_0;
  arg2 = (ImWchar)_swig_go_1;
  arg3 = (ImWchar)_swig_go_2;

  (arg1)->AddRemapChar(arg2,arg3);

}


#ifdef __cplusplus
}
#endif
